GetCredentialForMockIDA:
   InjiCertify_GetCredentialForMockIDA_IdpAccessToken_Invalid_format_Neg:
      endPoint: $INJICERTIFYMOCKIDABASEURL$/v1/certify/issuance/credential
      #uniqueIdentifier: TC_InjiCertify_GetCredentialForMockIDA_02
      #description: Verify the credential API response with invalid credential format
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/VCIMockIDANegTC/GetCredentialForMockIDANegTC/GetCredentialForMockIDANegTC
      outputTemplate: injicertify/error2
      input: '{
      	"client_id": "$ID:ESignet_CreateOIDCClientV2_ForMockIDA_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateToken_ForMockIDA_Valid_Smoke_sid_For_Neg_Flow_access_token$",
        "format": "invalid",
      	"type": [{types: "VerifiableCredential"}, {types: "MockVerifiableCredential"}],
      	"@context": [{context: "$VCICONTEXTURL$"}],
      	"proof_type": "jwt",
        "proof_jwt": "$PROOF_JWT_3$"
}'
      output: '{
		"error": "unsupported_credential_format"
}'

   InjiCertify_GetCredentialForMockIDA_IdpAccessToken_Without_format_Neg:
      endPoint: $INJICERTIFYMOCKIDABASEURL$/v1/certify/issuance/credential
      #uniqueIdentifier: TC_InjiCertify_GetCredentialForMockIDA_03
      #description: Verify the response when format field is removed from request body
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/VCIMockIDANegTC/GetCredentialForMockIDANegTC/GetCredentialForMockIDANegTC
      outputTemplate: injicertify/error2
      input: '{
      	"client_id": "$ID:ESignet_CreateOIDCClientV2_ForMockIDA_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateToken_ForMockIDA_Valid_Smoke_sid_For_Neg_Flow_access_token$",
      	"type": [{types: "VerifiableCredential"}, {types: "MockVerifiableCredential"}],
      	"@context": [{context: "$VCICONTEXTURL$"}],
      	"proof_type": "jwt",
        "proof_jwt": "$PROOF_JWT_3$"
}'
      output: '{
		"error": "invalid_vc_format"
}'

   InjiCertify_GetCredentialForMockIDA_IdpAccessToken_Empty_format_Neg:
      endPoint: $INJICERTIFYMOCKIDABASEURL$/v1/certify/issuance/credential
      #uniqueIdentifier: TC_InjiCertify_GetCredentialForMockIDA_04
      #description: Verify the response when format field is empty in the request body
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/VCIMockIDANegTC/GetCredentialForMockIDANegTC/GetCredentialForMockIDANegTC
      outputTemplate: injicertify/error2
      input: '{
      	"client_id": "$ID:ESignet_CreateOIDCClientV2_ForMockIDA_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateToken_ForMockIDA_Valid_Smoke_sid_For_Neg_Flow_access_token$",
        "format": "",
      	"type": [{types: "VerifiableCredential"}, {types: "MockVerifiableCredential"}],
      	"@context": [{context: "$VCICONTEXTURL$"}],
      	"proof_type": "jwt",
        "proof_jwt": "$PROOF_JWT_3$"
}'
      output: '{
		"error": "invalid_vc_format"
}'

   InjiCertify_GetCredentialForMockIDA_IdpAccessToken_Space_format_Neg:
      endPoint: $INJICERTIFYMOCKIDABASEURL$/v1/certify/issuance/credential
      #uniqueIdentifier: TC_InjiCertify_GetCredentialForMockIDA_05
      #description: Verify the response when format field is having just spaces in the request body
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/VCIMockIDANegTC/GetCredentialForMockIDANegTC/GetCredentialForMockIDANegTC
      outputTemplate: injicertify/error2
      input: '{
      	"client_id": "$ID:ESignet_CreateOIDCClientV2_ForMockIDA_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateToken_ForMockIDA_Valid_Smoke_sid_For_Neg_Flow_access_token$",
        "format": " ",
      	"type": [{types: "VerifiableCredential"}, {types: "MockVerifiableCredential"}],
      	"@context": [{context: "$VCICONTEXTURL$"}],
      	"proof_type": "jwt",
        "proof_jwt": "$PROOF_JWT_3$"
}'
      output: '{
		"error": "invalid_vc_format"
}'

   InjiCertify_GetCredentialForMockIDA_IdpAccessToken_WithUnImplementedJWT_format_Neg:
      endPoint: $INJICERTIFYMOCKIDABASEURL$/v1/certify/issuance/credential
      #uniqueIdentifier: TC_InjiCertify_GetCredentialForMockIDA_05
      #description: Request credential with the format jwt_vc_json
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/VCIMockIDANegTC/GetCredentialForMockIDANegTC/GetCredentialForMockIDANegTC
      outputTemplate: injicertify/error2
      input: '{
      	"client_id": "$ID:ESignet_CreateOIDCClientV2_ForMockIDA_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateToken_ForMockIDA_Valid_Smoke_sid_For_Neg_Flow_access_token$",
        "format": "jwt_vc_json",
      	"type": [{types: "VerifiableCredential"}, {types: "MockVerifiableCredential"}],
      	"@context": [{context: "$VCICONTEXTURL$"}],
      	"proof_type": "jwt",
        "proof_jwt": "$PROOF_JWT_3$"
}'
      output: '{
		"error": "not_implemented"
}'

   InjiCertify_GetCredentialForMockIDA_IdpAccessToken_WithUnImplementedJWTVCJsonld_format_Neg:
      endPoint: $INJICERTIFYMOCKIDABASEURL$/v1/certify/issuance/credential
      #uniqueIdentifier: TC_InjiCertify_GetCredentialForMockIDA_07
      #description: Request credential with the format jwt_vc_json-ld
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/VCIMockIDANegTC/GetCredentialForMockIDANegTC/GetCredentialForMockIDANegTC
      outputTemplate: injicertify/error2
      input: '{
      	"client_id": "$ID:ESignet_CreateOIDCClientV2_ForMockIDA_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateToken_ForMockIDA_Valid_Smoke_sid_For_Neg_Flow_access_token$",
        "format": "jwt_vc_json-ld",
      	"type": [{types: "VerifiableCredential"}, {types: "MockVerifiableCredential"}],
      	"@context": [{context: "$VCICONTEXTURL$"}],
      	"proof_type": "jwt",
        "proof_jwt": "$PROOF_JWT_3$"
}'
      output: '{
		"error": "not_implemented"
}'


   InjiCertify_GetCredentialForMockIDA_IdpAccessToken_WithMoreThanOne_format_Neg:
      endPoint: $INJICERTIFYMOCKIDABASEURL$/v1/certify/issuance/credential
      #uniqueIdentifier: TC_InjiCertify_GetCredentialForMockIDA_08
      #description: Request credential with more than one format
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/VCIMockIDANegTC/GetCredentialForMockIDANegTC/GetCredentialForMockIDANegTC
      outputTemplate: injicertify/error2
      input: '{
      	"client_id": "$ID:ESignet_CreateOIDCClientV2_ForMockIDA_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateToken_ForMockIDA_Valid_Smoke_sid_For_Neg_Flow_access_token$",
        "format": "jwt_vc_json-ld,jwt_vc_json-ld",
      	"type": [{types: "VerifiableCredential"}, {types: "MockVerifiableCredential"}],
      	"@context": [{context: "$VCICONTEXTURL$"}],
      	"proof_type": "jwt",
        "proof_jwt": "$PROOF_JWT_3$"
}'
      output: '{
		"error": "unsupported_credential_format"
}'

   InjiCertify_GetCredentialForMockIDA_IdpAccessToken_Without_credentialType_Neg:
      endPoint: $INJICERTIFYMOCKIDABASEURL$/v1/certify/issuance/credential
      #uniqueIdentifier: TC_InjiCertify_GetCredentialForMockIDA_09
      #description: Request credential without "credential_definition" in request body
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/VCIMockIDANegTC/GetCredentialForMockIDANegTC/GetCredentialForMockIDANegTC
      outputTemplate: injicertify/error2
      input: '{
      	"client_id": "$ID:ESignet_CreateOIDCClientV2_ForMockIDA_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateToken_ForMockIDA_Valid_Smoke_sid_For_Neg_Flow_access_token$",
        "format": "ldp_vc",
      	"type": [],
      	"@context": [{context: "$VCICONTEXTURL$"}],
      	"proof_type": "jwt",
        "proof_jwt": "$PROOF_JWT_3$"
}'
      output: '{
		"error": "invalid_request"
}'


   InjiCertify_GetCredentialForMockIDA_IdpAccessToken_OnlyWith_VerifiableCredentialType_Neg:
      endPoint: $INJICERTIFYMOCKIDABASEURL$/v1/certify/issuance/credential
      #uniqueIdentifier: TC_InjiCertify_GetCredentialForMockIDA_10
      #description: Credential_definition attribute is passed with only a value "VerifiableCredential"
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/VCIMockIDANegTC/GetCredentialForMockIDANegTC/GetCredentialForMockIDANegTC
      outputTemplate: injicertify/error2
      input: '{
      	"client_id": "$ID:ESignet_CreateOIDCClientV2_ForMockIDA_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateToken_ForMockIDA_Valid_Smoke_sid_For_Neg_Flow_access_token$",
        "format": "ldp_vc",
      	"type": [{types: "VerifiableCredential"}],
      	"@context": [{context: "$VCICONTEXTURL$"}],
      	"proof_type": "jwt",
        "proof_jwt": "$PROOF_JWT_3$"
}'
      output: '{
		"error": "unsupported_credential_type"
}'


   InjiCertify_GetCredentialForMockIDA_IdpAccessToken_OnlyWith_MockVerifiableCredentialType_Neg:
      endPoint: $INJICERTIFYMOCKIDABASEURL$/v1/certify/issuance/credential
      #uniqueIdentifier: TC_InjiCertify_GetCredentialForMockIDA_11
      #description: credential_definition attribute is passed with only a value "MOCKVerifiableCredential"
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/VCIMockIDANegTC/GetCredentialForMockIDANegTC/GetCredentialForMockIDANegTC
      outputTemplate: injicertify/error2
      input: '{
      	"client_id": "$ID:ESignet_CreateOIDCClientV2_ForMockIDA_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateToken_ForMockIDA_Valid_Smoke_sid_For_Neg_Flow_access_token$",
        "format": "ldp_vc",
      	"type": [{types: "MockVerifiableCredential"}],
      	"@context": [{context: "$VCICONTEXTURL$"}],
      	"proof_type": "jwt",
        "proof_jwt": "$PROOF_JWT_3$"
}'
      output: '{
		"error": "unsupported_credential_type"
}'

   InjiCertify_GetCredentialForMockIDA_IdpAccessToken_With_RandomCredentialType_Neg:
      endPoint: $INJICERTIFYMOCKIDABASEURL$/v1/certify/issuance/credential
      #uniqueIdentifier: TC_InjiCertify_GetCredentialForMockIDA_12
      #description: Response when random string is passed in credential_definition field
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/VCIMockIDANegTC/GetCredentialForMockIDANegTC/GetCredentialForMockIDANegTC
      outputTemplate: injicertify/error2
      input: '{
      	"client_id": "$ID:ESignet_CreateOIDCClientV2_ForMockIDA_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateToken_ForMockIDA_Valid_Smoke_sid_For_Neg_Flow_access_token$",
        "format": "ldp_vc",
      	"type": [{types: "randomvalue"}],
      	"@context": [{context: "$VCICONTEXTURL$"}],
      	"proof_type": "jwt",
        "proof_jwt": "$PROOF_JWT_3$"
}'
      output: '{
		"error": "unsupported_credential_type"
}'


   InjiCertify_GetCredentialForMockIDA_IdpAccessToken_Without_proof_Neg:
      endPoint: $INJICERTIFYMOCKIDABASEURL$/v1/certify/issuance/credential
      #uniqueIdentifier: TC_InjiCertify_GetCredentialForMockIDA_13
      #description: Request credential without "proof" in the request body
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/VCIMockIDANegTC/GetCredentialForMockIDANegTC/GetCredentialForMockIDANegTC2
      outputTemplate: injicertify/error2
      input: '{
      	"client_id": "$ID:ESignet_CreateOIDCClientV2_ForMockIDA_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateToken_ForMockIDA_Valid_Smoke_sid_For_Neg_Flow_access_token$",
        "format": "ldp_vc",
		"type": [{types: "VerifiableCredential"}, {types: "MockVerifiableCredential"}],
      	"@context": [{context: "$VCICONTEXTURL$"}]
}'
      output: '{
		"error": "invalid_proof"
}'


   InjiCertify_GetCredentialForMockIDA_IdpAccessToken_WithEmptyArray_proof_Neg:
      endPoint: $INJICERTIFYMOCKIDABASEURL$/v1/certify/issuance/credential
      #uniqueIdentifier: TC_InjiCertify_GetCredentialForMockIDA_14
      #description: Request credential with an empty array of "proof" attribute
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/VCIMockIDANegTC/GetCredentialForMockIDANegTC/GetCredentialForMockIDANegTC
      outputTemplate: injicertify/error2
      input: '{
      	"client_id": "$ID:ESignet_CreateOIDCClientV2_ForMockIDA_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateToken_ForMockIDA_Valid_Smoke_sid_For_Neg_Flow_access_token$",
        "format": "ldp_vc",
      	"type": [{types: "VerifiableCredential"}, {types: "MockVerifiableCredential"}],
      	"@context": [{context: "$VCICONTEXTURL$"}],
      	"proof_type": "",
        "proof_jwt": ""
}'
      output: '{
		"error": "unsupported_proof_type"
}'


   InjiCertify_GetCredentialForMockIDA_IdpAccessToken_WithOnlyProoftype_Neg:
      endPoint: $INJICERTIFYMOCKIDABASEURL$/v1/certify/issuance/credential
      #uniqueIdentifier: TC_InjiCertify_GetCredentialForMockIDA_15
      #description: Request credential with an array of "proof" attribute which has only proof type
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/VCIMockIDANegTC/GetCredentialForMockIDANegTC/GetCredentialForMockIDANegTC
      outputTemplate: injicertify/error2
      input: '{
      	"client_id": "$ID:ESignet_CreateOIDCClientV2_ForMockIDA_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateToken_ForMockIDA_Valid_Smoke_sid_For_Neg_Flow_access_token$",
        "format": "ldp_vc",
      	"type": [{types: "VerifiableCredential"}, {types: "MockVerifiableCredential"}],
      	"@context": [{context: "$VCICONTEXTURL$"}],
		"proof_type": "jwt"
}'
      output: '{
		"error": "invalid_proof"
}'


   InjiCertify_GetCredentialForMockIDA_IdpAccessToken_WithemptyProoftype_Neg:
      endPoint: $INJICERTIFYMOCKIDABASEURL$/v1/certify/issuance/credential
      #uniqueIdentifier: TC_InjiCertify_GetCredentialForMockIDA_16
      #description: Request credential with an array of "proof" attribute with empty proof type
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/VCIMockIDANegTC/GetCredentialForMockIDANegTC/GetCredentialForMockIDANegTC
      outputTemplate: injicertify/error2
      input: '{
      	"client_id": "$ID:ESignet_CreateOIDCClientV2_ForMockIDA_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateToken_ForMockIDA_Valid_Smoke_sid_For_Neg_Flow_access_token$",
        "format": "ldp_vc",
      	"type": [{types: "VerifiableCredential"}, {types: "MockVerifiableCredential"}],
      	"@context": [{context: "$VCICONTEXTURL$"}],
		"proof_type": "",
		"proof_jwt": "$PROOF_JWT_3$"
}'
      output: '{
		"error": "unsupported_proof_type"
}'


   InjiCertify_GetCredentialForMockIDA_IdpAccessToken_WithOnlySpaceProoftype_Neg:
      endPoint: $INJICERTIFYMOCKIDABASEURL$/v1/certify/issuance/credential
      #uniqueIdentifier: TC_InjiCertify_GetCredentialForMockIDA_17
      #description: Request credential with an array of "proof" attribute with just spaces in proof type field
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/VCIMockIDANegTC/GetCredentialForMockIDANegTC/GetCredentialForMockIDANegTC
      outputTemplate: injicertify/error2
      input: '{
      	"client_id": "$ID:ESignet_CreateOIDCClientV2_ForMockIDA_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateToken_ForMockIDA_Valid_Smoke_sid_For_Neg_Flow_access_token$",
        "format": "ldp_vc",
      	"type": [{types: "VerifiableCredential"}, {types: "MockVerifiableCredential"}],
      	"@context": [{context: "$VCICONTEXTURL$"}],
		"proof_type": " ",
		"proof_jwt": "$PROOF_JWT_3$"
}'
      output: '{
		"error": "unsupported_proof_type"
}'