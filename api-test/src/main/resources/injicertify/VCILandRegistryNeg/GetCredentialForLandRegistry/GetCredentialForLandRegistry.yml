GetCredentialForLandRegistry:
   InjiCertify_GetCredentialForLandRegistry_IdpAccessToken_Invalid_Credential_Type_Neg:
      endPoint: $INJICERTIFYBASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_InjiCertify_GetCredentialForLandRegistry_09
      description: Get credentials for Land Registry with invalid credential tyoe Neg
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/VCILandRegistryNeg/GetCredentialForLandRegistry/GetCredentialForLandRegistry
      outputTemplate: injicertify/error2
      input: '{
      	"client_id": "$ID:ESignet_CreateOIDCClientV2_ForLandRegistry_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateToken_ForLandRegistry_Pos_For_NegFlow_sid_access_token$",
        "format": "ldp_vc",
      	"type": [{types: "VerifiableCredential"}, {types: "LandCredential"}],
      	"@context": [{context: "$VCICONTEXTURL$"}],
      	"proof_type": "jwt",
        "proof_jwt": "$PROOF_JWT_3$",
        "credentialType": "LandStatementCredential",
        "signatureSupported": "RS256"
}'
      output: '{
		"error": "unsupported_credential_type"
}'

   InjiCertify_GetCredentialForLandRegistry_IdpAccessToken_with_Both_Context_Neg:
      endPoint: $INJICERTIFYBASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_InjiCertify_GetCredentialForLandRegistry_10
      description: Get credentials for Land Registry with multiple context neg
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/VCILandRegistryNeg/GetCredentialForLandRegistry/GetCredentialForLandRegistry
      outputTemplate: injicertify/error2
      input: '{
      	"client_id": "$ID:ESignet_CreateOIDCClientV2_ForLandRegistry_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateToken_ForLandRegistry_Pos_For_NegFlow_sid_access_token$",
        "format": "ldp_vc",
      	"type": [{types: "VerifiableCredential"}, {types: "LandStatementCredential"}],
      	"@context": [{context: "$VCICONTEXTURL$"}, {context: "$VCICONTEXTURL_2.0$"}],
      	"proof_type": "jwt",
        "proof_jwt": "$PROOF_JWT_3$",
        "credentialType": "LandStatementCredential",
        "signatureSupported": "RS256"
}'
      output: '{
		"error": "expected_template_not_found"
}'

   InjiCertify_GetCredentialForLandRegistry_IdpAccessToken_Cred_2_Invalid_Credential_Type_Neg:
      endPoint: $INJICERTIFYBASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_InjiCertify_GetCredentialForLandRegistry_11
      description: Get credentials for Land Registry with invalid credential tyoe Neg
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/VCILandRegistryNeg/GetCredentialForLandRegistry/GetCredentialForLandRegistry
      outputTemplate: injicertify/error2
      input: '{
      	"client_id": "$ID:ESignet_CreateOIDCClientV2_ForLandRegistry_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateToken_ForLandRegistry_Cred_2_Pos_For_NegFlow_sid_access_token$",
        "format": "ldp_vc",
      	"type": [{types: "VerifiableCredential"}, {types: "LandCredential"}],
      	"@context": [{context: "$VCICONTEXTURL$"}],
      	"proof_type": "jwt",
        "proof_jwt": "$PROOF_JWT_3$",
        "credentialType": "RegistrationReceiptCredential",
        "signatureSupported": "RS256"
}'
      output: '{
		"error": "unsupported_credential_type"
}'

   InjiCertify_GetCredentialForLandRegistry_IdpAccessToken_Cred_2_with_Both_Context_Neg:
      endPoint: $INJICERTIFYBASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_InjiCertify_GetCredentialForLandRegistry_12
      description: Get credentials for Land Registry with multiple context neg
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/VCILandRegistryNeg/GetCredentialForLandRegistry/GetCredentialForLandRegistry
      outputTemplate: injicertify/error2
      input: '{
      	"client_id": "$ID:ESignet_CreateOIDCClientV2_ForLandRegistry_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateToken_ForLandRegistry_Cred_2_Pos_For_NegFlow_sid_access_token$",
        "format": "ldp_vc",
      	"type": [{types: "VerifiableCredential"}, {types: "RegistrationReceiptCredential"}],
      	"@context": [{context: "$VCICONTEXTURL$"}, {context: "$VCICONTEXTURL_2.0$"}],
      	"proof_type": "jwt",
        "proof_jwt": "$PROOF_JWT_3$",
        "credentialType": "RegistrationReceiptCredential",
        "signatureSupported": "RS256"
}'
      output: '{
		"error": "expected_template_not_found"
}'

   InjiCertify_GetCredentialForLandRegistry_IdpAccessToken_ED25519_Sign_Invalid_Credential_Type_Neg:
      endPoint: $INJICERTIFYBASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_InjiCertify_GetCredentialForLandRegistry_09
      description: Get credentials for Land Registry with invalid credential tyoe Neg
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/VCILandRegistryNeg/GetCredentialForLandRegistry/GetCredentialForLandRegistry
      outputTemplate: injicertify/error2
      input: '{
      	"client_id": "$ID:ESignet_CreateOIDCClientV2_ForLandRegistry_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateToken_ForLandRegistry_Pos_For_NegFlow_sid_access_token$",
        "format": "ldp_vc",
      	"type": [{types: "VerifiableCredential"}, {types: "LandCredential"}],
      	"@context": [{context: "$VCICONTEXTURL$"}],
      	"proof_type": "jwt",
        "proof_jwt": "$PROOF_JWT_ED25519$",
        "credentialType": "LandStatementCredential",
        "signatureSupported": "Ed25519"
}'
      output: '{
		"error": "unsupported_credential_type"
}'

   InjiCertify_GetCredentialForLandRegistry_IdpAccessToken_ED25519_Sign_with_Both_Context_Neg:
      endPoint: $INJICERTIFYBASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_InjiCertify_GetCredentialForLandRegistry_10
      description: Get credentials for Land Registry with multiple context neg
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/VCILandRegistryNeg/GetCredentialForLandRegistry/GetCredentialForLandRegistry
      outputTemplate: injicertify/error2
      input: '{
      	"client_id": "$ID:ESignet_CreateOIDCClientV2_ForLandRegistry_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateToken_ForLandRegistry_Pos_For_NegFlow_sid_access_token$",
        "format": "ldp_vc",
      	"type": [{types: "VerifiableCredential"}, {types: "LandStatementCredential"}],
      	"@context": [{context: "$VCICONTEXTURL$"}, {context: "$VCICONTEXTURL_2.0$"}],
      	"proof_type": "jwt",
        "proof_jwt": "$PROOF_JWT_ED25519$",
        "credentialType": "LandStatementCredential",
        "signatureSupported": "Ed25519"
}'
      output: '{
		"error": "expected_template_not_found"
}'

   InjiCertify_GetCredentialForLandRegistry_IdpAccessToken_Cred_2_ED25519_Sign_Invalid_Credential_Type_Neg:
      endPoint: $INJICERTIFYBASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_InjiCertify_GetCredentialForLandRegistry_11
      description: Get credentials for Land Registry with invalid credential tyoe Neg
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/VCILandRegistryNeg/GetCredentialForLandRegistry/GetCredentialForLandRegistry
      outputTemplate: injicertify/error2
      input: '{
      	"client_id": "$ID:ESignet_CreateOIDCClientV2_ForLandRegistry_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateToken_ForLandRegistry_Cred_2_Pos_For_NegFlow_sid_access_token$",
        "format": "ldp_vc",
      	"type": [{types: "VerifiableCredential"}, {types: "LandCredential"}],
      	"@context": [{context: "$VCICONTEXTURL$"}],
      	"proof_type": "jwt",
        "proof_jwt": "$PROOF_JWT_ED25519$",
        "credentialType": "RegistrationReceiptCredential",
        "signatureSupported": "Ed25519"
}'
      output: '{
		"error": "unsupported_credential_type"
}'

   InjiCertify_GetCredentialForLandRegistry_IdpAccessToken_Cred_2_ED25519_Sign_with_Both_Context_Neg:
      endPoint: $INJICERTIFYBASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_InjiCertify_GetCredentialForLandRegistry_12
      description: Get credentials for Land Registry with multiple context neg
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/VCILandRegistryNeg/GetCredentialForLandRegistry/GetCredentialForLandRegistry
      outputTemplate: injicertify/error2
      input: '{
      	"client_id": "$ID:ESignet_CreateOIDCClientV2_ForLandRegistry_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateToken_ForLandRegistry_Cred_2_Pos_For_NegFlow_sid_access_token$",
        "format": "ldp_vc",
      	"type": [{types: "VerifiableCredential"}, {types: "RegistrationReceiptCredential"}],
      	"@context": [{context: "$VCICONTEXTURL$"}, {context: "$VCICONTEXTURL_2.0$"}],
      	"proof_type": "jwt",
        "proof_jwt": "$PROOF_JWT_ED25519$",
        "credentialType": "RegistrationReceiptCredential",
        "signatureSupported": "Ed25519"
}'
      output: '{
		"error": "expected_template_not_found"
}'

   InjiCertify_GetCredentialForLandRegistry_IdpAccessToken_ED25519_Sign_Missing_Proof_Jwt_Neg:
      endPoint: $INJICERTIFYBASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_InjiCertify_GetCredentialForLandRegistry_09
      description: Get credentials for Land Registry with invalid credential tyoe Neg
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/VCILandRegistryNeg/GetCredentialForLandRegistry/GetCredentialForLandRegistry
      outputTemplate: injicertify/error2
      input: '{
      	"client_id": "$ID:ESignet_CreateOIDCClientV2_ForLandRegistry_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateToken_ForLandRegistry_Pos_For_NegFlow_sid_access_token$",
        "format": "ldp_vc",
      	"type": [{types: "VerifiableCredential"}, {types: "LandStatementCredential"}],
      	"@context": [{context: "$VCICONTEXTURL$"}],
      	"proof_type": "jwt",
        "proof_jwt": "$REMOVE$",
        "credentialType": "LandStatementCredential",
        "signatureSupported": "Ed25519"
}'
      output: '{
		"error": "invalid_proof"
}'

   InjiCertify_GetCredentialForLandRegistry_IdpAccessToken_2.0_ED25519_Sign_Missing_Proof_Jwt_Neg:
      endPoint: $INJICERTIFYBASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_InjiCertify_GetCredentialForLandRegistry_10
      description: Get credentials for Land Registry with multiple context neg
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/VCILandRegistryNeg/GetCredentialForLandRegistry/GetCredentialForLandRegistry
      outputTemplate: injicertify/error2
      input: '{
      	"client_id": "$ID:ESignet_CreateOIDCClientV2_ForLandRegistry_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateToken_ForLandRegistry_Pos_For_NegFlow_sid_access_token$",
        "format": "ldp_vc",
      	"type": [{types: "VerifiableCredential"}, {types: "LandStatementCredential"}],
      	"@context": [{context: "$VCICONTEXTURL_2.0$"}],
      	"proof_type": "jwt",
        "proof_jwt": "$REMOVE$",
        "credentialType": "LandStatementCredential",
        "signatureSupported": "Ed25519"
}'
      output: '{
		"error": "invalid_proof"
}'

   InjiCertify_GetCredentialForLandRegistry_IdpAccessToken_ED25519_Sign_Invalid_Proof_Jwt_Neg:
      endPoint: $INJICERTIFYBASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_InjiCertify_GetCredentialForLandRegistry_11
      description: Get credentials for Land Registry with invalid credential tyoe Neg
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/VCILandRegistryNeg/GetCredentialForLandRegistry/GetCredentialForLandRegistry
      outputTemplate: injicertify/error2
      input: '{
      	"client_id": "$ID:ESignet_CreateOIDCClientV2_ForLandRegistry_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateToken_ForLandRegistry_Cred_2_Pos_For_NegFlow_sid_access_token$",
        "format": "ldp_vc",
      	"type": [{types: "VerifiableCredential"}, {types: "LandStatementCredential"}],
      	"@context": [{context: "$VCICONTEXTURL$"}],
      	"proof_type": "jwt",
        "proof_jwt": "sjkdbfjksd",
        "credentialType": "LandStatementCredential",
        "signatureSupported": "Ed25519"
}'
      output: '{
		"error": "invalid_proof"
}'

   InjiCertify_GetCredentialForLandRegistry_IdpAccessToken_2.0_ED25519_Sign_Invalid_Proof_Jwt_Neg:
      endPoint: $INJICERTIFYBASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_InjiCertify_GetCredentialForLandRegistry_12
      description: Get credentials for Land Registry with multiple context neg
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/VCILandRegistryNeg/GetCredentialForLandRegistry/GetCredentialForLandRegistry
      outputTemplate: injicertify/error2
      input: '{
      	"client_id": "$ID:ESignet_CreateOIDCClientV2_ForLandRegistry_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateToken_ForLandRegistry_Cred_2_Pos_For_NegFlow_sid_access_token$",
        "format": "ldp_vc",
      	"type": [{types: "VerifiableCredential"}, {types: "LandStatementCredential"}],
      	"@context": [{context: "$VCICONTEXTURL_2.0$"}],
      	"proof_type": "jwt",
        "proof_jwt": "sjkdbfjksd",
        "credentialType": "LandStatementCredential",
        "signatureSupported": "Ed25519"
}'
      output: '{
		"error": "invalid_proof"
}'