GetCredentialForSd_jwt:
   InjiCertify_GetCredentialForLandRegistry_IdpAccessToken_Cred1_Sd_jwt_RS256_all_Valid_Smoke:
      endPoint: $INJICERTIFYBASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_InjiCertify_GetCredentialFor_Sd_jwt_01
      description: Get credentials Sd_jwt format
      role: noauth
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/Sd_Jwt/GetCredentialForSd_Jwt/GetCredentialForSd_Jwt
      outputTemplate: injicertify/Sd_Jwt/GetCredentialForSd_Jwt/GetCredentialForSd_JwtResult      
      input: '{
      	"client_id": "$ID:ESignet_CreateOIDCClientV2_For_LandRegistry2_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateToken_ForLandRegistry_Cred1_Sd_Jwt_Valid_Smoke_sid_access_token$",
        "format": "vc+sd-jwt",
        "vct": "Sd_jwt_landstatement",        
      	"proof_type": "jwt",
        "proof_jwt": "$PROOF_JWT$",
        "signatureSupported": "RS256"
}'
      output: '{
}'

   InjiCertify_GetCredentialForLandRegistry_IdpAccessToken_Cred1_Sd_jwt_PS256_all_Valid_Smoke:
      endPoint: $INJICERTIFYBASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_InjiCertify_GetCredentialFor_Sd_jwt_02
      description: Get credentials Sd_jwt format for PS256
      role: noauth
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/Sd_Jwt/GetCredentialForSd_Jwt/GetCredentialForSd_Jwt
      outputTemplate: injicertify/Sd_Jwt/GetCredentialForSd_Jwt/GetCredentialForSd_JwtResult      
      input: '{
      	"client_id": "$ID:ESignet_CreateOIDCClientV2_For_LandRegistry2_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateToken_ForLandRegistry_Cred1_Sd_Jwt_Valid_Smoke_sid_access_token$",
        "format": "vc+sd-jwt",
        "vct": "Sd_jwt_landstatement",        
      	"proof_type": "jwt",
        "proof_jwt": "$PROOF_JWT_3$",
        "signatureSupported": "PS256"
}'
      output: '{
}'
   InjiCertify_GetCredentialForLandRegistry_IdpAccessToken_Cred1_Sd_jwt_Ed25519_all_Valid_Smoke:
      endPoint: $INJICERTIFYBASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_InjiCertify_GetCredentialFor_Sd_jwt_03
      description: Get credentials Sd_jwt format for Ed25519
      role: noauth
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/Sd_Jwt/GetCredentialForSd_Jwt/GetCredentialForSd_Jwt
      outputTemplate: injicertify/Sd_Jwt/GetCredentialForSd_Jwt/GetCredentialForSd_JwtResult      
      input: '{
      	"client_id": "$ID:ESignet_CreateOIDCClientV2_For_LandRegistry2_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateToken_ForLandRegistry_Cred1_Sd_Jwt_Valid_Smoke_sid_access_token$",
        "format": "vc+sd-jwt",
        "vct": "Sd_jwt_landstatement",        
      	"proof_type": "jwt",
        "proof_jwt": "$PROOF_JWT_ED25519$",
        "signatureSupported": "Ed25519"
}'
      output: '{
}'
   InjiCertify_GetCredentialForLandRegistry_IdpAccessToken_Cred1_Sd_jwt_null_proof_neg:
      endPoint: $INJICERTIFYBASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_InjiCertify_GetCredentialFor_Sd_jwt_04
      description: Get credentials Sd_jwt format for null proof
      role: noauth
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/Sd_Jwt/GetCredentialForSd_Jwt/GetCredentialForSd_Jwt
      outputTemplate: injicertify/error2      
      input: '{
      	"client_id": "$ID:ESignet_CreateOIDCClientV2_For_LandRegistry2_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateToken_ForLandRegistry_Cred1_Sd_Jwt_Valid_Smoke_sid_access_token$",
        "format": "vc+sd-jwt",
        "vct": "Sd_jwt_landstatement",        
      	"proof_type": "jwt",
        "proof_jwt": "null",
        "signatureSupported": "Ed25519"
}'
      output: '{
		"error": "invalid_proof"
}'

   InjiCertify_GetCredentialForLandRegistry_IdpAccessToken_Cred2_Sd_jwt_Ed25519_all_Valid_Smoke:
      endPoint: $INJICERTIFYBASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_InjiCertify_GetCredentialFor_Sd_jwt_05
      description: Get credentials Sd_jwt format for Ed25519 credential type 2
      role: noauth
      checkErrorsOnlyInResponse: true      
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/Sd_Jwt/GetCredentialForSd_Jwt/GetCredentialForSd_Jwt
      outputTemplate: injicertify/Sd_Jwt/GetCredentialForSd_Jwt/GetCredentialForSd_JwtResult      
      input: '{
      	"client_id": "$ID:ESignet_CreateOIDCClientV2_For_LandRegistry2_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateToken_ForLandRegistry_Cred2_Sd_Jwt_Valid_Smoke_sid_access_token$",
        "format": "vc+sd-jwt",
        "vct": "Sd_jwt_landregistry",        
      	"proof_type": "jwt",
        "proof_jwt": "$PROOF_JWT_ED25519$",
        "signatureSupported": "Ed25519"
}'
      output: '{
}'
   InjiCertify_GetCredentialForLandRegistry_IdpAccessToken_Cred2_Sd_jwt_without_vct:
      endPoint: $INJICERTIFYBASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_InjiCertify_GetCredentialFor_Sd_jwt_10
      description: Get credentials Sd_jwt format without vct
      role: noauth
      checkErrorsOnlyInResponse: true      
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/Sd_Jwt/GetCredentialForSd_Jwt/GetCredentialForSd_Jwt
      outputTemplate: injicertify/error2      
      input: '{
      	"client_id": "$ID:ESignet_CreateOIDCClientV2_For_LandRegistry2_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateToken_ForLandRegistry_Cred2_Sd_Jwt_Valid_Smoke_sid_access_token$",
        "format": "vc+sd-jwt",
      	"proof_type": "jwt",
        "proof_jwt": "$PROOF_JWT_ED25519$",
        "signatureSupported": "Ed25519"
}'
      output: '{
		"error": "invalid_request"
}'
   InjiCertify_GetCredentialForLandRegistry_IdpAccessToken_Cred1_Sd_jwt_invalid_format:
      endPoint: $INJICERTIFYBASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_InjiCertify_GetCredentialFor_Sd_jwt_11
      description: Get credentials for sd_jwt with invalid format
      role: noauth
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/Sd_Jwt/GetCredentialForSd_Jwt/GetCredentialForSd_Jwt
      outputTemplate: injicertify/error2      
      input: '{
      	"client_id": "$ID:ESignet_CreateOIDCClientV2_For_LandRegistry2_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateToken_ForLandRegistry_Cred1_Sd_Jwt_Valid_Smoke_sid_access_token$",
        "format": "sd-jwt",
        "vct": "Sd_jwt_landstatement",        
      	"proof_type": "jwt",
        "proof_jwt": "null",
        "signatureSupported": "Ed25519"
}'
      output: '{
		"error": "unsupported_credential_format"
}'
   InjiCertify_GetCredentialForLandRegistry_IdpAccessToken_Cred1_Sd_jwt_invalid_VCT_value:
      endPoint: $INJICERTIFYBASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_InjiCertify_GetCredentialFor_Sd_jwt_12
      description: Get credentials for sd_jwt with invalid vct value
      role: noauth
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/Sd_Jwt/GetCredentialForSd_Jwt/GetCredentialForSd_Jwt
      outputTemplate: injicertify/error2      
      input: '{
      	"client_id": "$ID:ESignet_CreateOIDCClientV2_For_LandRegistry2_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateToken_ForLandRegistry_Cred1_Sd_Jwt_Valid_Smoke_sid_access_token$",
        "format": "vc+sd-jwt",
        "vct": "invalid",        
      	"proof_type": "jwt",
        "proof_jwt": "null",
        "signatureSupported": "Ed25519"
}'
      output: '{
		"error": "invalid_scope"
}'
   InjiCertify_GetCredentialForLandRegistry_IdpAccessToken_Cred1_Sd_jwt_No_Claims:
      endPoint: $INJICERTIFYBASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_InjiCertify_GetCredentialFor_Sd_jwt_13
      description: Get credentials Sd_jwt format without claims
      role: noauth
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/Sd_Jwt/GetCredentialForSd_Jwt/GetCredentialForSd_Jwt
      outputTemplate: injicertify/Sd_Jwt/GetCredentialForSd_Jwt/GetCredentialForSd_JwtResult      
      input: '{
      	"client_id": "$ID:ESignet_CreateOIDCClientV2_For_LandRegistry2_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateToken_ForLandRegistry_Cred1_Sd_Jwt_Valid_Smoke_sid_access_token$",
        "format": "vc+sd-jwt",
        "vct": "Sd_jwt_sdClaims",        
      	"proof_type": "jwt",
        "proof_jwt": "$PROOF_JWT_3$",
        "signatureSupported": "PS256"
}'
      output: '{
}'
   InjiCertify_GetCredentialForLandRegistry_IdpAccessToken_Cred1_Sd_jwt_without_format_Neg:
      endPoint: $INJICERTIFYBASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_InjiCertify_GetCredentialFor_Sd_jwt_14
      description: Get credentials Sd_jwt format without claims
      role: noauth
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/Sd_Jwt/GetCredentialForSd_Jwt/GetCredentialForSd_Jwt
      outputTemplate: injicertify/error2      
      input: '{
      	"client_id": "$ID:ESignet_CreateOIDCClientV2_For_LandRegistry2_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateToken_ForLandRegistry_Cred1_Sd_Jwt_Valid_Smoke_sid_access_token$",
        "vct": "Sd_jwt_sdClaims",        
      	"proof_type": "jwt",
        "proof_jwt": "$PROOF_JWT_3$",
        "signatureSupported": "PS256"
}'
      output: '{
		"error": "invalid_vc_format"
}'
   InjiCertify_GetCredentialForLandRegistry_IdpAccessToken_Cred1_Random_claims:
      endPoint: $INJICERTIFYBASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_InjiCertify_GetCredentialFor_Sd_jwt_15
      description: Get credentials Sd_jwt format with random claims
      role: noauth
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/Sd_Jwt/GetCredentialForSd_Jwt/GetCredentialForSd_Jwt
      outputTemplate: injicertify/Sd_Jwt/GetCredentialForSd_Jwt/GetCredentialForSd_JwtResult      
      input: '{
      	"client_id": "$ID:ESignet_CreateOIDCClientV2_For_LandRegistry2_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateToken_ForLandRegistry_Cred1_Sd_Jwt_Valid_Smoke_sid_access_token$",
        "format": "vc+sd-jwt",
        "vct": "Sd_jwt_random_claims",        
      	"proof_type": "jwt",
        "proof_jwt": "$PROOF_JWT_3$",
        "signatureSupported": "PS256"
}'
      output: '{
}'
   InjiCertify_GetCredentialForLandRegistry_IdpAccessToken_Cred1_differentStructures:
      endPoint: $INJICERTIFYBASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_InjiCertify_GetCredentialFor_Sd_jwt_16
      description: Get credentials Sd_jwt format with different structures claims
      role: noauth
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/Sd_Jwt/GetCredentialForSd_Jwt/GetCredentialForSd_Jwt
      outputTemplate: injicertify/Sd_Jwt/GetCredentialForSd_Jwt/GetCredentialForSd_JwtResult      
      input: '{
      	"client_id": "$ID:ESignet_CreateOIDCClientV2_For_LandRegistry2_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateToken_ForLandRegistry_Cred1_Sd_Jwt_Valid_Smoke_sid_access_token$",
        "format": "vc+sd-jwt",
        "vct": "Sd_jwt_differtntstructures",        
      	"proof_type": "jwt",
        "proof_jwt": "$PROOF_JWT_3$",
        "signatureSupported": "PS256"
}'
      output: '{
}'