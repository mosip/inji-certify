GetCredentialForMockIDANegTC:
   InjiCertify_GetCredentialForMockIDA_IdpAccessToken_Invalid_Format_Neg:
      endPoint: $INJICERTIFYMOCKIDABASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_InjiCertify_GetCredentialForMockIDA_02
      description: Verify the credential API response with invalid credential format
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/VCIMockIDANegTC/GetCredentialForMockIDANegTC/GetCredentialForMockIDANegTC
      outputTemplate: injicertify/error2
      input: '{
        "client_id": "$ID:ESignet_CreateOIDCClientV2_ForMockIDA_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateToken_ForMockIDA_Valid_sid_For_Neg_Flow_access_token$",
        "format": "invalid",
        "type": [{types: "VerifiableCredential"}, {types: "MockVerifiableCredential"}],
        "@context": [{context: "$VCICONTEXTURL$"}],
        "proof_type": "jwt",
        "proof_jwt": "$PROOF_JWT_3$"
}'
      output: '{
        "error": "unsupported_credential_format"
}'

   InjiCertify_GetCredentialForMockIDA_IdpAccessToken_Missing_Format_Neg:
      endPoint: $INJICERTIFYMOCKIDABASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_InjiCertify_GetCredentialForMockIDA_03
      description: Verify the response when format field is removed from request body
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/VCIMockIDANegTC/GetCredentialForMockIDANegTC/GetCredentialForMockIDANegTC
      outputTemplate: injicertify/error2
      input: '{
        "client_id": "$ID:ESignet_CreateOIDCClientV2_ForMockIDA_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateToken_ForMockIDA_Valid_sid_For_Neg_Flow_access_token$",
        "type": [{types: "VerifiableCredential"}, {types: "MockVerifiableCredential"}],
        "@context": [{context: "$VCICONTEXTURL$"}],
        "proof_type": "jwt",
        "proof_jwt": "$PROOF_JWT_3$"
}'
      output: '{
        "error": "invalid_vc_format"
}'

   InjiCertify_GetCredentialForMockIDA_IdpAccessToken_Empty_Format_Neg:
      endPoint: $INJICERTIFYMOCKIDABASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_InjiCertify_GetCredentialForMockIDA_04
      description: Verify the response when format field is empty in the request body
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/VCIMockIDANegTC/GetCredentialForMockIDANegTC/GetCredentialForMockIDANegTC
      outputTemplate: injicertify/error2
      input: '{
        "client_id": "$ID:ESignet_CreateOIDCClientV2_ForMockIDA_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateToken_ForMockIDA_Valid_sid_For_Neg_Flow_access_token$",
        "format": "",
        "type": [{types: "VerifiableCredential"}, {types: "MockVerifiableCredential"}],
        "@context": [{context: "$VCICONTEXTURL$"}],
        "proof_type": "jwt",
        "proof_jwt": "$PROOF_JWT_3$"
}'
      output: '{
        "error": "invalid_vc_format"
}'

   InjiCertify_GetCredentialForMockIDA_IdpAccessToken_Space_Format_Neg:
      endPoint: $INJICERTIFYMOCKIDABASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_InjiCertify_GetCredentialForMockIDA_05
      description: Verify the response when format field is having just spaces in the request body
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/VCIMockIDANegTC/GetCredentialForMockIDANegTC/GetCredentialForMockIDANegTC
      outputTemplate: injicertify/error2
      input: '{
        "client_id": "$ID:ESignet_CreateOIDCClientV2_ForMockIDA_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateToken_ForMockIDA_Valid_sid_For_Neg_Flow_access_token$",
        "format": " ",
        "type": [{types: "VerifiableCredential"}, {types: "MockVerifiableCredential"}],
        "@context": [{context: "$VCICONTEXTURL$"}],
        "proof_type": "jwt",
        "proof_jwt": "$PROOF_JWT_3$"
}'
      output: '{
        "error": "invalid_vc_format"
}'

   InjiCertify_GetCredentialForMockIDA_IdpAccessToken_UnImplementedJWT_Format_Neg:
      endPoint: $INJICERTIFYMOCKIDABASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_InjiCertify_GetCredentialForMockIDA_06
      description: Request credential with the format jwt_vc_json
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/VCIMockIDANegTC/GetCredentialForMockIDANegTC/GetCredentialForMockIDANegTC
      outputTemplate: injicertify/error2
      input: '{
        "client_id": "$ID:ESignet_CreateOIDCClientV2_ForMockIDA_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateToken_ForMockIDA_Valid_sid_For_Neg_Flow_access_token$",
        "format": "jwt_vc_json",
        "type": [{types: "VerifiableCredential"}, {types: "MockVerifiableCredential"}],
        "@context": [{context: "$VCICONTEXTURL$"}],
        "proof_type": "jwt",
        "proof_jwt": "$PROOF_JWT_3$"
}'
      output: '{
        "error": "not_implemented"
}'

   InjiCertify_GetCredentialForMockIDA_IdpAccessToken_UnImplementedJWTVCJsonld_Format_Neg:
      endPoint: $INJICERTIFYMOCKIDABASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_InjiCertify_GetCredentialForMockIDA_07
      description: Request credential with the format jwt_vc_json-ld
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/VCIMockIDANegTC/GetCredentialForMockIDANegTC/GetCredentialForMockIDANegTC
      outputTemplate: injicertify/error2
      input: '{
        "client_id": "$ID:ESignet_CreateOIDCClientV2_ForMockIDA_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateToken_ForMockIDA_Valid_sid_For_Neg_Flow_access_token$",
        "format": "jwt_vc_json-ld",
        "type": [{types: "VerifiableCredential"}, {types: "MockVerifiableCredential"}],
        "@context": [{context: "$VCICONTEXTURL$"}],
        "proof_type": "jwt",
        "proof_jwt": "$PROOF_JWT_3$"
}'
      output: '{
        "error": "not_implemented"
}'


   InjiCertify_GetCredentialForMockIDA_IdpAccessToken_MoreThanOne_Format_Neg:
      endPoint: $INJICERTIFYMOCKIDABASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_InjiCertify_GetCredentialForMockIDA_08
      description: Request credential with more than one format
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/VCIMockIDANegTC/GetCredentialForMockIDANegTC/GetCredentialForMockIDANegTC
      outputTemplate: injicertify/error2
      input: '{
        "client_id": "$ID:ESignet_CreateOIDCClientV2_ForMockIDA_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateToken_ForMockIDA_Valid_sid_For_Neg_Flow_access_token$",
        "format": "jwt_vc_json-ld,jwt_vc_json-ld",
        "type": [{types: "VerifiableCredential"}, {types: "MockVerifiableCredential"}],
        "@context": [{context: "$VCICONTEXTURL$"}],
        "proof_type": "jwt",
        "proof_jwt": "$PROOF_JWT_3$"
}'
      output: '{
        "error": "unsupported_credential_format"
}'

   InjiCertify_GetCredentialForMockIDA_IdpAccessToken_Missing_CredentialType_Neg:
      endPoint: $INJICERTIFYMOCKIDABASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_InjiCertify_GetCredentialForMockIDA_09
      description: Request credential without "credential_definition" in request body
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/VCIMockIDANegTC/GetCredentialForMockIDANegTC/GetCredentialForMockIDANegTC
      outputTemplate: injicertify/error2
      input: '{
        "client_id": "$ID:ESignet_CreateOIDCClientV2_ForMockIDA_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateToken_ForMockIDA_Valid_sid_For_Neg_Flow_access_token$",
        "format": "ldp_vc",
        "type": [],
        "@context": [{context: "$VCICONTEXTURL$"}],
        "proof_type": "jwt",
        "proof_jwt": "$PROOF_JWT_3$"
}'
      output: '{
        "error": "invalid_request"
}'


   InjiCertify_GetCredentialForMockIDA_IdpAccessToken_Only_VerifiableCredentialType_Neg:
      endPoint: $INJICERTIFYMOCKIDABASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_InjiCertify_GetCredentialForMockIDA_10
      description: Credential_definition attribute is passed with only a value "VerifiableCredential"
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/VCIMockIDANegTC/GetCredentialForMockIDANegTC/GetCredentialForMockIDANegTC
      outputTemplate: injicertify/error2
      input: '{
        "client_id": "$ID:ESignet_CreateOIDCClientV2_ForMockIDA_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateToken_ForMockIDA_Valid_sid_For_Neg_Flow_access_token$",
        "format": "ldp_vc",
        "type": [{types: "VerifiableCredential"}],
        "@context": [{context: "$VCICONTEXTURL$"}],
        "proof_type": "jwt",
        "proof_jwt": "$PROOF_JWT_3$"
}'
      output: '{
        "error": "unsupported_credential_type"
}'


   InjiCertify_GetCredentialForMockIDA_IdpAccessToken_Only_MockVerifiableCredentialType_Neg:
      endPoint: $INJICERTIFYMOCKIDABASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_InjiCertify_GetCredentialForMockIDA_11
      description: credential_definition attribute is passed with only a value "MOCKVerifiableCredential"
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/VCIMockIDANegTC/GetCredentialForMockIDANegTC/GetCredentialForMockIDANegTC
      outputTemplate: injicertify/error2
      input: '{
        "client_id": "$ID:ESignet_CreateOIDCClientV2_ForMockIDA_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateToken_ForMockIDA_Valid_sid_For_Neg_Flow_access_token$",
        "format": "ldp_vc",
        "type": [{types: "MockVerifiableCredential"}],
        "@context": [{context: "$VCICONTEXTURL$"}],
        "proof_type": "jwt",
        "proof_jwt": "$PROOF_JWT_3$"
}'
      output: '{
        "error": "unsupported_credential_type"
}'

   InjiCertify_GetCredentialForMockIDA_IdpAccessToken_Invalid_Random_CredentialType_Neg:
      endPoint: $INJICERTIFYMOCKIDABASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_InjiCertify_GetCredentialForMockIDA_12
      description: Response when random string is passed in credential_definition field
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/VCIMockIDANegTC/GetCredentialForMockIDANegTC/GetCredentialForMockIDANegTC
      outputTemplate: injicertify/error2
      input: '{
        "client_id": "$ID:ESignet_CreateOIDCClientV2_ForMockIDA_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateToken_ForMockIDA_Valid_sid_For_Neg_Flow_access_token$",
        "format": "ldp_vc",
        "type": [{types: "randomvalue"}],
        "@context": [{context: "$VCICONTEXTURL$"}],
        "proof_type": "jwt",
        "proof_jwt": "$PROOF_JWT_3$"
}'
      output: '{
        "error": "unsupported_credential_type"
}'


   InjiCertify_GetCredentialForMockIDA_IdpAccessToken_Missing_Proof_Neg:
      endPoint: $INJICERTIFYMOCKIDABASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_InjiCertify_GetCredentialForMockIDA_13
      description: Request credential without "proof" in the request body
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/VCIMockIDANegTC/GetCredentialForMockIDANegTC/GetCredentialForMockIDANegTC2
      outputTemplate: injicertify/error2
      input: '{
        "client_id": "$ID:ESignet_CreateOIDCClientV2_ForMockIDA_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateToken_ForMockIDA_Valid_sid_For_Neg_Flow_access_token$",
        "format": "ldp_vc",
        "type": [{types: "VerifiableCredential"}, {types: "MockVerifiableCredential"}],
        "@context": [{context: "$VCICONTEXTURL$"}]
}'
      output: '{
        "error": "invalid_proof"
}'


   InjiCertify_GetCredentialForMockIDA_IdpAccessToken_Empty_ArrayProof_Neg:
      endPoint: $INJICERTIFYMOCKIDABASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_InjiCertify_GetCredentialForMockIDA_14
      description: Request credential with an empty array of "proof" attribute
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/VCIMockIDANegTC/GetCredentialForMockIDANegTC/GetCredentialForMockIDANegTC
      outputTemplate: injicertify/error2
      input: '{
        "client_id": "$ID:ESignet_CreateOIDCClientV2_ForMockIDA_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateToken_ForMockIDA_Valid_sid_For_Neg_Flow_access_token$",
        "format": "ldp_vc",
        "type": [{types: "VerifiableCredential"}, {types: "MockVerifiableCredential"}],
        "@context": [{context: "$VCICONTEXTURL$"}],
        "proof_type": "",
        "proof_jwt": ""
}'
      output: '{
        "error": "unsupported_proof_type"
}'


   InjiCertify_GetCredentialForMockIDA_IdpAccessToken_Only_ProofType_Neg:
      endPoint: $INJICERTIFYMOCKIDABASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_InjiCertify_GetCredentialForMockIDA_15
      description: Request credential with an array of "proof" attribute which has only proof type
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/VCIMockIDANegTC/GetCredentialForMockIDANegTC/GetCredentialForMockIDANegTC
      outputTemplate: injicertify/error2
      input: '{
        "client_id": "$ID:ESignet_CreateOIDCClientV2_ForMockIDA_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateToken_ForMockIDA_Valid_sid_For_Neg_Flow_access_token$",
        "format": "ldp_vc",
        "type": [{types: "VerifiableCredential"}, {types: "MockVerifiableCredential"}],
        "@context": [{context: "$VCICONTEXTURL$"}],
        "proof_type": "jwt"
}'
      output: '{
        "error": "invalid_proof"
}'


   InjiCertify_GetCredentialForMockIDA_IdpAccessToken_Empty_ProofType_Neg:
      endPoint: $INJICERTIFYMOCKIDABASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_InjiCertify_GetCredentialForMockIDA_16
      description: Request credential with an array of "proof" attribute with empty proof type
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/VCIMockIDANegTC/GetCredentialForMockIDANegTC/GetCredentialForMockIDANegTC
      outputTemplate: injicertify/error2
      input: '{
        "client_id": "$ID:ESignet_CreateOIDCClientV2_ForMockIDA_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateToken_ForMockIDA_Valid_sid_For_Neg_Flow_access_token$",
        "format": "ldp_vc",
        "type": [{types: "VerifiableCredential"}, {types: "MockVerifiableCredential"}],
        "@context": [{context: "$VCICONTEXTURL$"}],
        "proof_type": "",
        "proof_jwt": "$PROOF_JWT_3$"
}'
      output: '{
        "error": "unsupported_proof_type"
}'


   InjiCertify_GetCredentialForMockIDA_IdpAccessToken_Space_ProofType_Neg:
      endPoint: $INJICERTIFYMOCKIDABASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_InjiCertify_GetCredentialForMockIDA_17
      description: Request credential with an array of "proof" attribute with just spaces in proof type field
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/VCIMockIDANegTC/GetCredentialForMockIDANegTC/GetCredentialForMockIDANegTC
      outputTemplate: injicertify/error2
      input: '{
        "client_id": "$ID:ESignet_CreateOIDCClientV2_ForMockIDA_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateToken_ForMockIDA_Valid_sid_For_Neg_Flow_access_token$",
        "format": "ldp_vc",
        "type": [{types: "VerifiableCredential"}, {types: "MockVerifiableCredential"}],
        "@context": [{context: "$VCICONTEXTURL$"}],
        "proof_type": " ",
        "proof_jwt": "$PROOF_JWT_3$"
}'
      output: '{
        "error": "unsupported_proof_type"
}'

   InjiCertify_GetCredentialForMockIDA_IdpAccessToken_Only_ProofJwt_Neg:
      endPoint: $INJICERTIFYMOCKIDABASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_InjiCertify_GetCredentialForMockIDA_18
      description: Request credential with an array of "proof" attribute by just passing the "jwt" in proof field
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/VCIMockIDANegTC/GetCredentialForMockIDANegTC/GetCredentialForMockIDANegTC
      outputTemplate: injicertify/error2
      input: '{
        "client_id": "$ID:ESignet_CreateOIDCClientV2_ForMockIDA_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateToken_ForMockIDA_Valid_sid_For_Neg_Flow_access_token$",
        "format": "ldp_vc",
        "type": [{types: "VerifiableCredential"}, {types: "MockVerifiableCredential"}],
        "@context": [{context: "$VCICONTEXTURL$"}],
        "proof_jwt": "$PROOF_JWT_3"
}'
      output: '{
        "error": "unsupported_proof_type"
}'

   InjiCertify_GetCredentialForMockIDA_IdpAccessToken_Empty_ProofJwt_Neg:
      endPoint: $INJICERTIFYMOCKIDABASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_InjiCertify_GetCredentialForMockIDA_19
      description: Request credential with an array of "proof" attribute with an empty "jwt".
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/VCIMockIDANegTC/GetCredentialForMockIDANegTC/GetCredentialForMockIDANegTC
      outputTemplate: injicertify/error2
      input: '{
        "client_id": "$ID:ESignet_CreateOIDCClientV2_ForMockIDA_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateToken_ForMockIDA_Valid_sid_For_Neg_Flow_access_token$",
        "format": "ldp_vc",
        "type": [{types: "VerifiableCredential"}, {types: "MockVerifiableCredential"}],
        "@context": [{context: "$VCICONTEXTURL$"}],
        "proof_type": "jwt",		
        "proof_jwt": ""
}'
      output: '{
        "error": "invalid_proof"
}'

   InjiCertify_GetCredentialForMockIDA_IdpAccessToken_Space_ProofJwt_Neg:
      endPoint: $INJICERTIFYMOCKIDABASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_InjiCertify_GetCredentialForMockIDA_20
      description: Request credential with an array of "proof" attribute with just spaces in "jwt" value
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/VCIMockIDANegTC/GetCredentialForMockIDANegTC/GetCredentialForMockIDANegTC
      outputTemplate: injicertify/error2
      input: '{
        "client_id": "$ID:ESignet_CreateOIDCClientV2_ForMockIDA_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateToken_ForMockIDA_Valid_sid_For_Neg_Flow_access_token$",
        "format": "ldp_vc",
        "type": [{types: "VerifiableCredential"}, {types: "MockVerifiableCredential"}],
        "@context": [{context: "$VCICONTEXTURL$"}],
        "proof_type": "jwt",		
        "proof_jwt": " "
}'
      output: '{
        "error": "invalid_proof"
}'

   InjiCertify_GetCredentialForMockIDA_IdpAccessToken_Invalid_ProofJwt_Neg:
      endPoint: $INJICERTIFYMOCKIDABASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_InjiCertify_GetCredentialForMockIDA_21
      description: Request credential with an array of "proof" attribute with invalid "jwt" value.
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/VCIMockIDANegTC/GetCredentialForMockIDANegTC/GetCredentialForMockIDANegTC
      outputTemplate: injicertify/error2
      input: '{
        "client_id": "$ID:ESignet_CreateOIDCClientV2_ForMockIDA_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateToken_ForMockIDA_Valid_sid_For_Neg_Flow_access_token$",
        "format": "ldp_vc",
        "type": [{types: "VerifiableCredential"}, {types: "MockVerifiableCredential"}],
        "@context": [{context: "$VCICONTEXTURL$"}],
        "proof_type": "jwt",		
        "proof_jwt": "invalid"
}'
      output: '{
        "error": "invalid_proof"
}'

   InjiCertify_GetCredentialForMockIDA_IdpAccessToken_UnSupported_ProofType_Neg:
      endPoint: $INJICERTIFYMOCKIDABASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_InjiCertify_GetCredentialForMockIDA_22
      description: Request credential with unsupported proof type
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/VCIMockIDANegTC/GetCredentialForMockIDANegTC/GetCredentialForMockIDANegTC
      outputTemplate: injicertify/error2
      input: '{
        "client_id": "$ID:ESignet_CreateOIDCClientV2_ForMockIDA_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateToken_ForMockIDA_Valid_sid_For_Neg_Flow_access_token$",
        "format": "ldp_vc",
        "type": [{types: "VerifiableCredential"}, {types: "MockVerifiableCredential"}],
        "@context": [{context: "$VCICONTEXTURL$"}],
        "proof_type": "cwt",		
        "proof_jwt": "$PROOF_JWT_3$"
}'
      output: '{
        "error": "unsupported_proof_type"
}'


   InjiCertify_GetCredentialForMockIDA_IdpAccessToken_Invalid_ProofType_Neg:
      endPoint: $INJICERTIFYMOCKIDABASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_InjiCertify_GetCredentialForMockIDA_23
      description: Request credential with invalid proof type
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/VCIMockIDANegTC/GetCredentialForMockIDANegTC/GetCredentialForMockIDANegTC
      outputTemplate: injicertify/error2
      input: '{
        "client_id": "$ID:ESignet_CreateOIDCClientV2_ForMockIDA_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateToken_ForMockIDA_Valid_sid_For_Neg_Flow_access_token$",
        "format": "ldp_vc",
        "type": [{types: "VerifiableCredential"}, {types: "MockVerifiableCredential"}],
        "@context": [{context: "$VCICONTEXTURL$"}],
        "proof_type": "jwt123",		
        "proof_jwt": "$PROOF_JWT_3$"
}'
      output: '{
        "error": "unsupported_proof_type"
}'



   InjiCertify_GetCredentialForMockIDA_IdpAccessToken_Invalid_C_nonce_Neg:
      endPoint: $INJICERTIFYMOCKIDABASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_InjiCertify_GetCredentialForMockIDA_24
      description: Request credential by passing invalid c_nonce in the proof
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/VCIMockIDANegTC/GetCredentialForMockIDANegTC/GetCredentialForMockIDANegTC
      outputTemplate: injicertify/error2
      input: '{
        "client_id": "$ID:ESignet_CreateOIDCClientV2_ForMockIDA_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateToken_ForMockIDA_Valid_sid_For_Neg_Flow_access_token$",
        "format": "ldp_vc",
        "type": [{types: "VerifiableCredential"}, {types: "MockVerifiableCredential"}],
        "@context": [{context: "$VCICONTEXTURL$"}],
        "proof_type": "jwt",
        "proof_jwt": "$PROOF_JWT_3$"
}'
      output: '{
        "error": "invalid_proof"
}'

   InjiCertify_GetCredentialForMockIDA_IdpAccessToken_Exp_C_nonce_Neg:
      endPoint: $INJICERTIFYMOCKIDABASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_InjiCertify_GetCredentialForMockIDA_27
      description: Request credential with c_nonce issued by credential endpoint c_nonce is expired (1st issued c_nonce by credential service)
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/VCIMockIDANegTC/GetCredentialForMockIDANegTC/GetCredentialForMockIDANegTC
      outputTemplate: injicertify/error2
      input: '{
        "client_id": "$ID:ESignet_CreateOIDCClientV2_ForMockIDA_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateToken_ForMockIDA_Valid_sid_For_Neg_Flow_access_token$",
        "format": "ldp_vc",
        "type": [{types: "VerifiableCredential"}, {types: "MockVerifiableCredential"}],
        "@context": [{context: "$VCICONTEXTURL$"}],
        "proof_type": "jwt",
        "proof_jwt": "$PROOF_JWT_3$"
}'
      output: '{
        "error": "invalid_proof"
}'