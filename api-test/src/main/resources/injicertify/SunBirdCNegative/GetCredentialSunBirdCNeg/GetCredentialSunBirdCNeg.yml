GetCredentialSunBirdCNeg:
   InjiCertify_GetCredentialSunBirdC_IdpAccessToken_invalid_format_Neg:
      endPoint: $INJICERTIFYINSURANCEBASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_injicertify_credentialissuance_01      
      description: Get sunbird VC when invalid format is given and expected VC download should get failed with proper error      
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/SunBirdCNegative/GetCredentialSunBirdCNeg/GetCredentialSunBirdCNeg
      outputTemplate: injicertify/error2
      input: '{
      	"client_id": "$ID:ESignet_CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateTokenSunBirdC_Valid_Smoke_sid_Neg_access_token$",
        "format": "abcdef",
      	"type": [{types: "VerifiableCredential"}, {types: "InsuranceCredential"}],
      	"@context": [{context: "$VCICONTEXTURL$"}],
      	"proof_type": "jwt",
        "proof_jwt": "$PROOF_JWT_2$"
}'
      output: '{
      "error": "unsupported_credential_format"
}'
   InjiCertify_GetCredentialSunBirdC_IdpAccessToken_without_format_Neg:
      endPoint: $INJICERTIFYINSURANCEBASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_injicertify_credentialissuance_02      
      description: Get sunbird VC when format is removed from request body and expected VC download should get failed with proper error     
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/SunBirdCNegative/GetCredentialSunBirdCNeg/GetCredentialSunBirdCNeg
      outputTemplate: injicertify/error2
      input: '{
      	"client_id": "$ID:ESignet_CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateTokenSunBirdC_Valid_Smoke_sid_Neg_access_token$",
      	"type": [{types: "VerifiableCredential"}, {types: "InsuranceCredential"}],
      	"@context": [{context: "$VCICONTEXTURL$"}],
      	"proof_type": "jwt",
        "proof_jwt": "$PROOF_JWT_2$"
}'
      output: '{
      "error": "invalid_vc_format"
}'
   InjiCertify_GetCredentialSunBirdC_IdpAccessToken_unsupported_format_value_Neg:
      endPoint: $INJICERTIFYINSURANCEBASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_injicertify_credentialissuance_03      
      description: Get sunbird VC when format value is given random value and expected VC download should get failed with proper error    
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/SunBirdCNegative/GetCredentialSunBirdCNeg/GetCredentialSunBirdCNeg
      outputTemplate: injicertify/error2
      input: '{
      	"client_id": "$ID:ESignet_CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateTokenSunBirdC_Valid_Smoke_sid_Neg_access_token$",
        "format": "jwt_vc_json",
      	"type": [{types: "VerifiableCredential"}, {types: "InsuranceCredential"}],
      	"@context": [{context: "$VCICONTEXTURL$"}],
      	"proof_type": "jwt",
        "proof_jwt": "$PROOF_JWT_2$"
}'
      output: '{
      "error": "not_implemented"
}'
   InjiCertify_GetCredentialSunBirdC_IdpAccessToken_multiple_format_value_Neg:
      endPoint: $INJICERTIFYINSURANCEBASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_injicertify_credentialissuance_04      
      description: Get sunbird VC when multiple values given as format and expected VC download should get failed with proper error   
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/SunBirdCNegative/GetCredentialSunBirdCNeg/GetCredentialSunBirdCNeg
      outputTemplate: injicertify/error2
      input: '{
      	"client_id": "$ID:ESignet_CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateTokenSunBirdC_Valid_Smoke_sid_Neg_access_token$",
        "format": "ldp_vc, jwt_vc_json-ld",
      	"type": [{types: "VerifiableCredential"}, {types: "InsuranceCredential"}],
      	"@context": [{context: "$VCICONTEXTURL$"}],
      	"proof_type": "jwt",
        "proof_jwt": "$PROOF_JWT_2$"
}'
      output: '{
      "error": "unsupported_credential_format"
}'
   InjiCertify_GetCredentialSunBirdC_IdpAccessToken_onlyone_credentialtype_1_Neg:
      endPoint: $INJICERTIFYINSURANCEBASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_injicertify_credentialissuance_05      
      description: Get sunbird VC when only one type is given for credential type and expected VC download should get failed with proper error    
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/SunBirdCNegative/GetCredentialSunBirdCNeg/GetCredentialSunBirdCNeg
      outputTemplate: injicertify/error2
      input: '{
      	"client_id": "$ID:ESignet_CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateTokenSunBirdC_Valid_Smoke_sid_Neg_access_token$",
        "format": "ldp_vc",
      	"type": [{types: "VerifiableCredential"}],
      	"@context": [{context: "$VCICONTEXTURL$"}],
      	"proof_type": "jwt",
        "proof_jwt": "$PROOF_JWT_2$"
}'
      output: '{
      "error": "unsupported_credential_type"
}'
   InjiCertify_GetCredentialSunBirdC_IdpAccessToken_onlyone_credentialtype_2_Neg:
      endPoint: $INJICERTIFYINSURANCEBASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_injicertify_credentialissuance_06     
      description: Get sunbird VC when only one type is given for credential type and expected VC download should get failed with proper error     
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/SunBirdCNegative/GetCredentialSunBirdCNeg/GetCredentialSunBirdCNeg
      outputTemplate: injicertify/error2
      input: '{
      	"client_id": "$ID:ESignet_CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateTokenSunBirdC_Valid_Smoke_sid_Neg_access_token$",
        "format": "ldp_vc",
      	"type": [{types: "InsuranceCredential"}],
      	"@context": [{context: "$VCICONTEXTURL$"}],
      	"proof_type": "jwt",
        "proof_jwt": "$PROOF_JWT_2$"
}'
      output: '{
      "error": "unsupported_credential_type"
}'
   InjiCertify_GetCredentialSunBirdC_IdpAccessToken_random_credentialtype_Neg:
      endPoint: $INJICERTIFYINSURANCEBASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_injicertify_credentialissuance_07      
      description: Get sunbird VC when random value is given for credential type and expected VC download should get failed with proper error     
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/SunBirdCNegative/GetCredentialSunBirdCNeg/GetCredentialSunBirdCNeg
      outputTemplate: injicertify/error2
      input: '{
      	"client_id": "$ID:ESignet_CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateTokenSunBirdC_Valid_Smoke_sid_Neg_access_token$",
        "format": "ldp_vc",
      	"type": [{types: "abcdefghij"}],
      	"@context": [{context: "$VCICONTEXTURL$"}],
      	"proof_type": "jwt",
        "proof_jwt": "$PROOF_JWT_2$"
}'
      output: '{
      "error": "unsupported_credential_type"
}'
   InjiCertify_GetCredentialSunBirdC_IdpAccessToken_empty_proof_Neg:
      endPoint: $INJICERTIFYINSURANCEBASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_injicertify_credentialissuance_08      
      description: Get sunbird VC without proof in request body and expected VC download should get failed with proper error    
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/SunBirdCNegative/GetCredentialSunBirdCNeg/GetCredentialSunBirdCNeg
      outputTemplate: injicertify/error2
      input: '{
      	"client_id": "$ID:ESignet_CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateTokenSunBirdC_Valid_Smoke_sid_Neg_access_token$",
        "format": "ldp_vc",
      	"type": [{types: "VerifiableCredential"}, {types: "InsuranceCredential"}],
      	"@context": [{context: "$VCICONTEXTURL$"}],
        "proof_type": "$REMOVE$",
        "proof_jwt": "$REMOVE$"
}'
      output: '{
      "error": "unsupported_proof_type"
}'
   InjiCertify_GetCredentialSunBirdC_IdpAccessToken_only_prooftype_Neg:
      endPoint: $INJICERTIFYINSURANCEBASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_injicertify_credentialissuance_09     
      description: Get sunbird VC when only proof type is given in request body and expected VC download should get failed with proper error     
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/SunBirdCNegative/GetCredentialSunBirdCNeg/GetCredentialSunBirdCNeg
      outputTemplate: injicertify/error2
      input: '{
      	"client_id": "$ID:ESignet_CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateTokenSunBirdC_Valid_Smoke_sid_Neg_access_token$",
        "format": "ldp_vc",
      	"type": [{types: "VerifiableCredential"}, {types: "InsuranceCredential"}],
      	"@context": [{context: "$VCICONTEXTURL$"}],
      	"proof_type": "jwt",
        "proof_jwt": "$REMOVE$"
}'
      output: '{
      "error": "invalid_proof"
}'
   InjiCertify_GetCredentialSunBirdC_IdpAccessToken_emptyvalue_prooftype_Neg:
      endPoint: $INJICERTIFYINSURANCEBASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_injicertify_credentialissuance_10     
      description: Get sunbird VC when proof type value is empty and expected VC download should get failed with proper error   
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/SunBirdCNegative/GetCredentialSunBirdCNeg/GetCredentialSunBirdCNeg
      outputTemplate: injicertify/error2
      input: '{
      	"client_id": "$ID:ESignet_CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateTokenSunBirdC_Valid_Smoke_sid_Neg_access_token$",
        "format": "ldp_vc",
      	"type": [{types: "VerifiableCredential"}, {types: "InsuranceCredential"}],
      	"@context": [{context: "$VCICONTEXTURL$"}],
      	"proof_type": "",
        "proof_jwt": "$PROOF_JWT_2$"
}'
      output: '{
      "error": "unsupported_proof_type"
}'
   InjiCertify_GetCredentialSunBirdC_IdpAccessToken_onlySpaces_prooftype_Neg:
      endPoint: $INJICERTIFYINSURANCEBASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_injicertify_credentialissuance_11    
      description: Get sunbird VC when proof type value is with only spaces and expected VC download should get failed with proper error     
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/SunBirdCNegative/GetCredentialSunBirdCNeg/GetCredentialSunBirdCNeg
      outputTemplate: injicertify/error2
      input: '{
      	"client_id": "$ID:ESignet_CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateTokenSunBirdC_Valid_Smoke_sid_Neg_access_token$",
        "format": "ldp_vc",
      	"type": [{types: "VerifiableCredential"}, {types: "InsuranceCredential"}],
      	"@context": [{context: "$VCICONTEXTURL$"}],
      	"proof_type": "   ",
        "proof_jwt": "$PROOF_JWT_2$"
}'
      output: '{
      "error": "unsupported_proof_type"
}'
   InjiCertify_GetCredentialSunBirdC_IdpAccessToken_invalid_proofjwtvalue_Neg:
      endPoint: $INJICERTIFYINSURANCEBASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_injicertify_credentialissuance_12
      description: Get sunbird VC when invalid proof jwt value is given and expected VC download should get failed with proper error     
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/SunBirdCNegative/GetCredentialSunBirdCNeg/GetCredentialSunBirdCNeg
      outputTemplate: injicertify/error2
      input: '{
      	"client_id": "$ID:ESignet_CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateTokenSunBirdC_Valid_Smoke_sid_Neg_access_token$",
        "format": "ldp_vc",
      	"type": [{types: "VerifiableCredential"}, {types: "InsuranceCredential"}],
      	"@context": [{context: "$VCICONTEXTURL$"}],
        "proof_type": "jwt",
        "proof_jwt": "asdaffdsa"
}'
      output: '{
      "error": "invalid_proof"
}'
   InjiCertify_GetCredentialSunBirdC_IdpAccessToken_emptyvalue_format_Neg:
      endPoint: $INJICERTIFYINSURANCEBASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_injicertify_credentialissuance_13      
      description: Get sunbird VC when format value is given empty and expected VC download should get failed with proper error      
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/SunBirdCNegative/GetCredentialSunBirdCNeg/GetCredentialSunBirdCNeg
      outputTemplate: injicertify/error2
      input: '{
      	"client_id": "$ID:ESignet_CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateTokenSunBirdC_Valid_Smoke_sid_Neg_access_token$",
        "format": "",
      	"type": [{types: "VerifiableCredential"}, {types: "InsuranceCredential"}],
      	"@context": [{context: "$VCICONTEXTURL$"}],
      	"proof_type": "jwt",
        "proof_jwt": "$PROOF_JWT_2$"
}'
      output: '{
      "error": "invalid_vc_format"
}'
   InjiCertify_GetCredentialSunBirdC_IdpAccessToken_only_proofjwtvalue_Neg:
      endPoint: $INJICERTIFYINSURANCEBASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_injicertify_credentialissuance_14    
      description: Get sunbird VC when only proofjwt value is given in request and expected VC download should get failed with proper error    
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/SunBirdCNegative/GetCredentialSunBirdCNeg/GetCredentialSunBirdCNeg
      outputTemplate: injicertify/error2
      input: '{
      	"client_id": "$ID:ESignet_CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateTokenSunBirdC_Valid_Smoke_sid_Neg_access_token$",
        "format": "ldp_vc",
      	"type": [{types: "VerifiableCredential"}, {types: "InsuranceCredential"}],
      	"@context": [{context: "$VCICONTEXTURL$"}],
        "proof_jwt": "$PROOF_JWT_2$"
}'
      output: '{
      "error": "unsupported_proof_type"
}'
   InjiCertify_GetCredentialSunBirdC_IdpAccessToken_spaces_proofjwtvalue_Neg:
      endPoint: $INJICERTIFYINSURANCEBASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_injicertify_credentialissuance_15      
      description: Get sunbird VC when only spaces given for proofjwt value and expected VC download should get failed with proper error     
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/SunBirdCNegative/GetCredentialSunBirdCNeg/GetCredentialSunBirdCNeg
      outputTemplate: injicertify/error2
      input: '{
      	"client_id": "$ID:ESignet_CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateTokenSunBirdC_Valid_Smoke_sid_Neg_access_token$",
        "format": "ldp_vc",
      	"type": [{types: "VerifiableCredential"}, {types: "InsuranceCredential"}],
      	"@context": [{context: "$VCICONTEXTURL$"}],
      	"proof_type": "jwt",
        "proof_jwt": "  "
}'
      output: '{
      "error": "invalid_proof"
}'
   InjiCertify_GetCredentialSunBirdC_IdpAccessToken_invalid_jwtvalue_Neg:
      endPoint: $INJICERTIFYINSURANCEBASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_injicertify_credentialissuance_16      
      description: Get sunbird VC when invalid value is given for jwt and expected VC download should get failed with proper error      
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/SunBirdCNegative/GetCredentialSunBirdCNeg/GetCredentialSunBirdCNeg
      outputTemplate: injicertify/error2
      input: '{
      	"client_id": "$ID:ESignet_CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateTokenSunBirdC_Valid_Smoke_sid_Neg_access_token$",
        "format": "ldp_vc",
      	"type": [{types: "VerifiableCredential"}, {types: "InsuranceCredential"}],
      	"@context": [{context: "$VCICONTEXTURL$"}],
      	"proof_type": "jwt",
        "proof_jwt": "PROOF_cwt"
}'
      output: '{
      "error": "invalid_proof"
}'
   InjiCertify_GetCredentialSunBirdC_IdpAccessToken_invalid_prooftype_Neg:
      endPoint: $INJICERTIFYINSURANCEBASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_injicertify_credentialissuance_18      
      description: Get sunbird VC when invalid prooftype value is given and expected VC download should get failed with proper error      
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/SunBirdCNegative/GetCredentialSunBirdCNeg/GetCredentialSunBirdCNeg
      outputTemplate: injicertify/error2
      input: '{
      	"client_id": "$ID:ESignet_CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateTokenSunBirdC_Valid_Smoke_sid_Neg_access_token$",
        "format": "ldp_vc",
      	"type": [{types: "VerifiableCredential"}, {types: "InsuranceCredential"}],
      	"@context": [{context: "$VCICONTEXTURL$"}],
      	"proof_type": "jwt123",
        "proof_jwt": "$PROOF_JWT_2$"
}'
      output: '{
      "error": "unsupported_proof_type"
}'
   InjiCertify_GetCredentialSunBirdC_IdpAccessToken_unsupported_prooftype_Neg:
      endPoint: $INJICERTIFYINSURANCEBASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_injicertify_credentialissuance_17      
      description: Get sunbird VC when unsupported prooftype value is given and expected VC download should get failed with proper error     
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/SunBirdCNegative/GetCredentialSunBirdCNeg/GetCredentialSunBirdCNeg
      outputTemplate: injicertify/error2
      input: '{
      	"client_id": "$ID:ESignet_CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateTokenSunBirdC_Valid_Smoke_sid_Neg_access_token$",
        "format": "ldp_vc",
      	"type": [{types: "VerifiableCredential"}, {types: "InsuranceCredential"}],
      	"@context": [{context: "$VCICONTEXTURL$"}],
      	"proof_type": "cwt",
        "proof_jwt": "$PROOF_JWT_2$"
}'
      output: '{
      "error": "unsupported_proof_type"
}'
   InjiCertify_GetCredentialSunBirdC_IdpAccessToken_Invalid_C_nonce_Neg:
      endPoint: $INJICERTIFYINSURANCEBASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_injicertify_credentialissuance_19
      description: Get sunbird VC when invalid c_nonce is passed and expected VC download should get failed with proper error     
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/SunBirdCNegative/GetCredentialSunBirdCNeg/GetCredentialSunBirdCNeg
      outputTemplate: injicertify/error2
      input: '{
      	"client_id": "$ID:ESignet_CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateTokenSunBirdC_Valid_Smoke_sid_Neg_access_token$",
        "format": "ldp_vc",
      	"type": [{types: "VerifiableCredential"}, {types: "InsuranceCredential"}],
      	"@context": [{context: "$VCICONTEXTURL$"}],
      	"proof_type": "jwt",
        "proof_jwt": "$PROOF_JWT_2$"
}'
      output: '{
      "error": "invalid_proof"
}'
   InjiCertify_GetCredentialSunBirdC_IdpAccessToken_Invalid_Typ_Neg:
      endPoint: $INJICERTIFYINSURANCEBASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_injicertify_credentialissuance_20
      description: Get sunbird VC when invalid type is passed and expected VC download should get failed with proper error    
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/SunBirdCNegative/GetCredentialSunBirdCNeg/GetCredentialSunBirdCNeg
      outputTemplate: injicertify/error2
      input: '{
      	"client_id": "$ID:ESignet_CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateTokenSunBirdC_Valid_Smoke_sid_Neg_access_token$",
        "format": "ldp_vc",
      	"type": [{types: "VerifiableCredential"}, {types: "InsuranceCredential"}],
      	"@context": [{context: "$VCICONTEXTURL$"}],
      	"proof_type": "jwt",
        "proof_jwt": "$PROOF_JWT_2$"
}'
      output: '{
      "error": "invalid_proof"
}'
   InjiCertify_GetCredentialSunBirdC_IdpAccessToken_Empty_Typ_Neg:
      endPoint: $INJICERTIFYINSURANCEBASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_injicertify_credentialissuance_21
      description: Get sunbird VC when empty type is passed and expected VC download should get failed with proper error     
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/SunBirdCNegative/GetCredentialSunBirdCNeg/GetCredentialSunBirdCNeg
      outputTemplate: injicertify/error2
      input: '{
      	"client_id": "$ID:ESignet_CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateTokenSunBirdC_Valid_Smoke_sid_Neg_access_token$",
        "format": "ldp_vc",
      	"type": [{types: "VerifiableCredential"}, {types: "InsuranceCredential"}],
      	"@context": [{context: "$VCICONTEXTURL$"}],
      	"proof_type": "jwt",
        "proof_jwt": "$PROOF_JWT_2$"
}'
      output: '{
      "error": "invalid_proof"
}'
   InjiCertify_GetCredentialSunBirdC_IdpAccessToken_Missing_Typ_Neg:
      endPoint: $INJICERTIFYINSURANCEBASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_injicertify_credentialissuance_22
      description: Get sunbird VC when Missing type attribute and expected VC download should get failed with proper error     
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/SunBirdCNegative/GetCredentialSunBirdCNeg/GetCredentialSunBirdCNeg
      outputTemplate: injicertify/error2
      input: '{
      	"client_id": "$ID:ESignet_CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateTokenSunBirdC_Valid_Smoke_sid_Neg_access_token$",
        "format": "ldp_vc",
      	"type": [{types: "VerifiableCredential"}, {types: "InsuranceCredential"}],
      	"@context": [{context: "$VCICONTEXTURL$"}],
      	"proof_type": "jwt",
        "proof_jwt": "$PROOF_JWT_2$"
}'
      output: '{
      "error": "invalid_proof"
}'
   InjiCertify_GetCredentialSunBirdC_IdpAccessToken_Invalid_JwkHeader_Neg:
      endPoint: $INJICERTIFYINSURANCEBASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_injicertify_credentialissuance_23
      description: Get sunbird VC when invalid JWK header is passed and expected VC download should get failed with proper error     
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/SunBirdCNegative/GetCredentialSunBirdCNeg/GetCredentialSunBirdCNeg
      outputTemplate: injicertify/error2
      input: '{
      	"client_id": "$ID:ESignet_CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateTokenSunBirdC_Valid_Smoke_sid_Neg_access_token$",
        "format": "ldp_vc",
      	"type": [{types: "VerifiableCredential"}, {types: "InsuranceCredential"}],
      	"@context": [{context: "$VCICONTEXTURL$"}],
      	"proof_type": "jwt",
        "proof_jwt": "$PROOF_JWT_2$"
}'
      output: '{
      "error": "invalid_proof"
}'
   InjiCertify_GetCredentialSunBirdC_IdpAccessToken_Missing_JwkHeader_Neg:
      endPoint: $INJICERTIFYINSURANCEBASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_injicertify_credentialissuance_24
      description: Get sunbird VC when JWK header is missing and expected VC download should get failed with proper error    
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/SunBirdCNegative/GetCredentialSunBirdCNeg/GetCredentialSunBirdCNeg
      outputTemplate: injicertify/error2
      input: '{
      	"client_id": "$ID:ESignet_CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateTokenSunBirdC_Valid_Smoke_sid_Neg_access_token$",
        "format": "ldp_vc",
      	"type": [{types: "VerifiableCredential"}, {types: "InsuranceCredential"}],
      	"@context": [{context: "$VCICONTEXTURL$"}],
      	"proof_type": "jwt",
        "proof_jwt": "$PROOF_JWT_2$"
}'
      output: '{
      "error": "invalid_proof"
}'
   InjiCertify_GetCredentialSunBirdC_IdpAccessToken_Empty_C_nonce_Neg:
      endPoint: $INJICERTIFYINSURANCEBASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_injicertify_credentialissuance_25
      description: Get sunbird VC when c_nonce value is given empty and expected VC download should get failed with proper error      
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/SunBirdCNegative/GetCredentialSunBirdCNeg/GetCredentialSunBirdCNeg
      outputTemplate: injicertify/error2
      input: '{
      	"client_id": "$ID:ESignet_CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateTokenSunBirdC_Valid_Smoke_sid_Neg_access_token$",
        "format": "ldp_vc",
      	"type": [{types: "VerifiableCredential"}, {types: "InsuranceCredential"}],
      	"@context": [{context: "$VCICONTEXTURL$"}],
      	"proof_type": "jwt",
        "proof_jwt": "$PROOF_JWT_2$"
}'
      output: '{
      "error": "invalid_proof"
}'
   InjiCertify_GetCredentialSunBirdC_IdpAccessToken_Empty_Aud_Neg:
      endPoint: $INJICERTIFYINSURANCEBASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_injicertify_credentialissuance_26
      description: Get sunbird VC when aud value is given empty and expected VC download should get failed with proper error     
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/SunBirdCNegative/GetCredentialSunBirdCNeg/GetCredentialSunBirdCNeg
      outputTemplate: injicertify/error2
      input: '{
      	"client_id": "$ID:ESignet_CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateTokenSunBirdC_Valid_Smoke_sid_Neg_access_token$",
        "format": "ldp_vc",
      	"type": [{types: "VerifiableCredential"}, {types: "InsuranceCredential"}],
      	"@context": [{context: "$VCICONTEXTURL$"}],
      	"proof_type": "jwt",
        "proof_jwt": "$PROOF_JWT_2$"
}'
      output: '{
      "error": "invalid_proof"
}'
   InjiCertify_GetCredentialSunBirdC_IdpAccessToken_Exp_C_nonce_Neg:
      endPoint: $INJICERTIFYINSURANCEBASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_injicertify_credentialissuance_27
      description: Get sunbird VC when aud value is given empty and expected VC download should get failed with proper error     
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/SunBirdCNegative/GetCredentialSunBirdCNeg/GetCredentialSunBirdCNeg
      outputTemplate: injicertify/error2
      input: '{
      	"client_id": "$ID:ESignet_CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateTokenSunBirdC_Valid_Smoke_sid_Neg_access_token$",
        "format": "ldp_vc",
      	"type": [{types: "VerifiableCredential"}, {types: "InsuranceCredential"}],
      	"@context": [{context: "$VCICONTEXTURL$"}],
      	"proof_type": "jwt",
        "proof_jwt": "$PROOF_JWT_2$"
}'
      output: '{
      "error": "invalid_proof"
}'
   InjiCertify_GetCredentialSunBirdC_IdpAccessToken_Invalid_Aud_Neg:
      endPoint: $INJICERTIFYINSURANCEBASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_injicertify_credentialissuance_31
      description: Get sunbird VC when invalid aud value is passed and expected VC download should get failed with proper error     
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/SunBirdCNegative/GetCredentialSunBirdCNeg/GetCredentialSunBirdCNeg
      outputTemplate: injicertify/error2
      input: '{
      	"client_id": "$ID:ESignet_CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateTokenSunBirdC_Valid_Smoke_sid_Neg_access_token$",
        "format": "ldp_vc",
      	"type": [{types: "VerifiableCredential"}, {types: "InsuranceCredential"}],
      	"@context": [{context: "$VCICONTEXTURL$"}],
      	"proof_type": "jwt",
        "proof_jwt": "$PROOF_JWT_2$"
}'
      output: '{
      "error": "invalid_proof"
}'
   InjiCertify_GetCredentialSunBirdC_IdpAccessToken_Invalid_Iss_Neg:
      endPoint: $INJICERTIFYINSURANCEBASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_injicertify_credentialissuance_32
      description: Get sunbird VC when invalid iss value is passed and expected VC download should get failed with proper error      
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/SunBirdCNegative/GetCredentialSunBirdCNeg/GetCredentialSunBirdCNeg
      outputTemplate: injicertify/error2
      input: '{
      	"client_id": "$ID:ESignet_CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateTokenSunBirdC_Valid_Smoke_sid_Neg_access_token$",
        "format": "ldp_vc",
      	"type": [{types: "VerifiableCredential"}, {types: "InsuranceCredential"}],
      	"@context": [{context: "$VCICONTEXTURL$"}],
      	"proof_type": "jwt",
        "proof_jwt": "$PROOF_JWT_2$"
}'
      output: '{
      "error": "invalid_proof"
}'
   InjiCertify_GetCredentialSunBirdC_IdpAccessToken_Credentialtype_random_Neg:
      endPoint: $INJICERTIFYINSURANCEBASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_injicertify_credentialissuance_33
      description: Get sunbird VC when random value added along with exiting credential types and expected VC download should get failed with proper error     
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/SunBirdCNegative/GetCredentialSunBirdCNeg/GetCredentialSunBirdCNeg
      outputTemplate: injicertify/error2
      input: '{
      	"client_id": "$ID:ESignet_CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateTokenSunBirdC_Valid_Smoke_sid_Neg_access_token$",
        "format": "ldp_vc",
      	"type": [{types: "VerifiableCredential"}, {types: "InsuranceCredential"},{types: "abcdef"}],
      	"@context": [{context: "$VCICONTEXTURL$"}],
      	"proof_type": "jwt",
        "proof_jwt": "$PROOF_JWT_2$"
}'
      output: '{
      "error": "vci_exchange_failed"
}'
   InjiCertify_GetCredentialSunBirdC_IdpAccessToken_Context_empty_Neg:
      endPoint: $INJICERTIFYINSURANCEBASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_injicertify_credentialissuance_34
      description: Get sunbird VC when context value is given empty and expected VC download should get failed with proper error      
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/SunBirdCNegative/GetCredentialSunBirdCNeg/GetCredentialSunBirdCNeg
      outputTemplate: injicertify/error2
      input: '{
      	"client_id": "$ID:ESignet_CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateTokenSunBirdC_Valid_Smoke_sid_Neg_access_token$",
        "format": "ldp_vc",
      	"type": [{types: "VerifiableCredential"}, {types: "InsuranceCredential"}],
      	"@context": "",
      	"proof_type": "jwt",
        "proof_jwt": "$PROOF_JWT_2$"
}'
      output: '{
      "error": "invalid request"
}'
   InjiCertify_GetCredentialSunBirdC_IdpAccessToken_Context_missing_Neg:
      endPoint: $INJICERTIFYINSURANCEBASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_injicertify_credentialissuance_35
      description: Get sunbird VC when context field is removed and expected VC download should get failed with proper error     
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/SunBirdCNegative/GetCredentialSunBirdCNeg/GetCredentialSunBirdCNegWOContext
      outputTemplate: injicertify/error2
      input: '{
      	"client_id": "$ID:ESignet_CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateTokenSunBirdC_Valid_Smoke_sid_Neg_access_token$",
        "format": "ldp_vc",
      	"type": [{types: "VerifiableCredential"}, {types: "InsuranceCredential"}],
      	"proof_type": "jwt",
        "proof_jwt": "$PROOF_JWT_2$"
}'
      output: '{
      "error": "unknown_error"
}'
   InjiCertify_GetCredentialSunBirdC_IdpAccessToken_context_Emptyarray_Neg:
      endPoint: $INJICERTIFYINSURANCEBASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_injicertify_credentialissuance_36
      description: Get sunbird VC when empty array is given as context value and expected VC download should get failed with proper error     
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/SunBirdCNegative/GetCredentialSunBirdCNeg/GetCredentialSunBirdCNeg
      outputTemplate: injicertify/error2
      input: '{
      	"client_id": "$ID:ESignet_CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateTokenSunBirdC_Valid_Smoke_sid_Neg_access_token$",
        "format": "ldp_vc",
      	"type": [{types: "VerifiableCredential"}, {types: "InsuranceCredential"}],
      	"@context": [],
      	"proof_type": "jwt",
        "proof_jwt": "$PROOF_JWT_2$"
}'
      output: '{
	   "error": "vci_exchange_failed"
}'
   InjiCertify_GetCredentialSunBirdC_IdpAccessToken_context_invalid_Neg:
      endPoint: $INJICERTIFYINSURANCEBASEURL$/v1/certify/issuance/credential
      uniqueIdentifier: TC_injicertify_credentialissuance_37
      description: Get sunbird VC when invalid value is given as context value and expected VC download should get failed with proper error      
      role: resident
      checkErrorsOnlyInResponse: true
      restMethod: post
      validityCheckRequired: true
      inputTemplate: injicertify/SunBirdCNegative/GetCredentialSunBirdCNeg/GetCredentialSunBirdCNeg
      outputTemplate: injicertify/error2
      input: '{
      	"client_id": "$ID:ESignet_CreateOIDCClientV2SunBirdC_all_Valid_Smoke_sid_clientId$",
        "idpAccessToken": "$ID:ESignet_GenerateTokenSunBirdC_Valid_Smoke_sid_Neg_access_token$",
        "format": "ldp_vc",
      	"type": [{types: "VerifiableCredential"}, {types: "InsuranceCredential"}],
      	"@context": [{context: "dfshgshssg"}],
      	"proof_type": "jwt",
        "proof_jwt": "$PROOF_JWT_2$"
}'
      output: '{
      "error": "vci_exchange_failed"
}'