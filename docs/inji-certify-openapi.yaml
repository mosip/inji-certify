openapi: 3.0.1
info:
  version: v0
  title: OpenAPI definition
servers:
  - url: 'http://localhost:8090/v1/certify'
    description: Generated server url
paths:
  '/credentials/configurations/{configurationId}':
    get:
      tags:
        - credential-config-controller
      summary: Fetch credential configuration
      description: Retrieves a credential configuration by its unique ID. Returns an error if the configuration does not exist or is not active.
      operationId: getCredentialConfigurationById
      parameters:
        - name: configurationId
          description: Unique key identifier for the credential configuration.
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CredentialConfigurationDTO'
      servers:
        - url: 'http://localhost:8090/v1/certify'
          description: Generated server url
    put:
      tags:
        - credential-config-controller
      summary: Update credential configuration
      description: Updates an existing credential configuration. Performs similar validations as the creation endpoint.
      operationId: updateCredentialConfiguration
      parameters:
        - name: configurationId
          description: Unique key identifier for the credential configuration.
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CredentialConfigurationDTO'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CredentialConfigResponse'
      servers:
        - url: 'http://localhost:8090/v1/certify'
          description: Generated server url
    delete:
      tags:
        - credential-config-controller
      summary: Delete credential configuration
      description: Deletes a credential configuration by its ID. Returns an error if the configuration does not exist.
      operationId: deleteCredentialConfigurationById
      parameters:
        - name: configurationId
          description: Unique key identifier for the credential configuration
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
      servers:
        - url: 'http://localhost:8090/v1/certify'
          description: Generated server url
  /system-info/uploadCertificate:
    post:
      tags:
        - system-info-controller
      summary: Upload signature certificate
      description: 'This endpoint allows clients to upload a signed certificate to the system. The client must provide the certificate details in the request body, wrapped in a request object. Upon receiving a valid request, the service processes the certificate upload using the key manager service and returns the result in a response object, including the response time. If the upload fails due to validation errors or other issues, the endpoint responds with a relevant error message'
      operationId: uploadSignedCertificate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestWrapperUploadCertificateRequestDto'
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ResponseWrapperUploadCertificateResponseDto'
      servers:
        - url: 'http://localhost:8090/v1/certify'
          description: Generated server url
      deprecated: true
  /issuance/vd12/credential:
    post:
      tags:
        - vc-issuance-controller
      summary: Credential Issuance (as per OpenID VCI Draft 12 specification)
      description: The endpoint specifically handles requests and responses according to the vd12 draft version of the credential format. It ensures compatibility with the OpenID VCI draft 12 specification and returns the credential in the requested format.
      operationId: getCredentialV12Draft
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CredentialRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CredentialResponse'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/VCError'
      servers:
        - url: 'http://localhost:8090/v1/certify'
          description: Generated server url
  /issuance/vd11/credential:
    post:
      tags:
        - vc-issuance-controller
      summary: Credential Issuance (as per OpenID VCI Draft 11 specification)
      description: The endpoint specifically handles requests and responses according to the vd11 draft version of the credential format. It ensures compatibility with the OpenID VCI draft 11 specification and returns the credential in the requested format.
      operationId: getCredentialV11Draft
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CredentialRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CredentialResponse'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/VCError'
      servers:
        - url: 'http://localhost:8090/v1/certify'
          description: Generated server url
  /issuance/credential:
    post:
      tags:
        - vc-issuance-controller
      summary: Credential Issuance (as per OpenID VCI Draft 13 specification)
      description: The endpoint specifically handles requests and responses according to the draft version of the credential format. It ensures compatibility with the OpenID VCI draft 13 specification and returns the credential in the requested format.
      operationId: getCredential
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CredentialRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CredentialResponse'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/VCError'
      servers:
        - url: 'http://localhost:8090/v1/certify'
          description: Generated server url
  /credentials/configurations:
    post:
      tags:
        - credential-config-controller
      summary: Add credential configuration
      description: Creates a new credential configuration. Requires a valid request body as per schema and has some additional validations too based on credential format and plugin configuration.
      operationId: addCredentialConfiguration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CredentialConfigurationDTO'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CredentialConfigResponse'
      servers:
        - url: 'http://localhost:8090/v1/certify'
          description: Generated server url
  /system-info/certificate:
    get:
      tags:
        - system-info-controller
      operationId: getCertificate
      summary: Fetch signature certificate
      description: 'This endpoint retrieves the certificate associated with a given application ID and an optional reference ID. When a client calls this endpoint with a valid application ID, the service fetches the corresponding certificate details from the key manager service. If the request is valid and the certificate exists, the endpoint returns the certificate information wrapped in a response object, along with the response time. If the request is invalid or the certificate cannot be found, an appropriate error is returned.'
      parameters:
        - name: applicationId
          description: Identifier for the application whose certificate is requested.
          in: query
          required: true
          schema:
            type: string
        - name: referenceId
          description: Optional reference for tracking or versioning the certificate.
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ResponseWrapperKeyPairGenerateResponseDto'
      servers:
        - url: 'http://localhost:8090/v1/certify'
          description: Generated server url
  '/rendering-template/{id}':
    get:
      tags:
        - rendering-template-controller
      summary: Rendering template retrieval
      description: 'The endpoint retrieves an SVG rendering template by its unique identifier. When a client calls this endpoint with a valid template ID, the service fetches the corresponding SVG template and returns it with the appropriate content type and cache headers. This enables clients to obtain up-to-date templates for rendering digital credentials or certificates, ensuring consistent and customizable visual representations. If the template is not found or an error occurs, an appropriate error response is returned.'
      operationId: serveSvgTemplate
      parameters:
        - name: id
          description: The unique identifier of the SVG rendering template to be retrieved.
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: string
      servers:
        - url: 'http://localhost:8090/v1/certify'
          description: Generated server url
  /issuance/.well-known/openid-credential-issuer:
    get:
      tags:
        - vc-issuance-controller
      summary: Issuer metadata
      description: 'This endpoint provides metadata about the credential issuer and the supported credential configurations. The response structure adapts based on the version query parameter, allowing clients to discover issuer capabilities and supported credential types for different OID4VCI versions. The response will be as per the applicable OID4VCI specification, for e.g. for draft 13 of OID4VCI, the specification to be referred is [https://openid.net/specs/openid-4-verifiable-credential-issuance-1_0-ID1.html#name-credential-issuer-metadata-p](url)'
      operationId: getMetadata
      parameters:
        - name: version
          in: query
          required: false
          schema:
            type: string
            default: latest
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: object
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/VCError'
      servers:
        - url: 'http://localhost:8090/v1/certify'
          description: Generated server url
  /issuance/.well-known/did.json:
    get:
      tags:
        - vc-issuance-controller
      summary: Issuer DID document
      description: 'This endpoint returns the DID document associated with the issuer. This document contains the decentralized identifier and related public keys, enabling clients to verify the issuer’s identity and interact securely. The response will be as per the specification provided here : [https://www.w3.org/ns/did/v1](url)'
      operationId: getDIDDocument
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: object
                additionalProperties:
                  type: object
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/VCError'
      servers:
        - url: 'http://localhost:8090/v1/certify'
          description: Generated server url
  /credentials/.well-known/openid-credential-issuer:
    get:
      tags:
        - credential-config-controller
      summary: Fetch issuer metadata
      description: 'The /credentials/.well-known/openid-credential-issuer endpoint is a GET API that returns metadata about the credential issuer and the supported credential configurations, following the OID4VCI specification. When a client calls this endpoint, the service responds with a JSON object containing the issuer’s identifier, display information, supported credential formats, cryptographic methods, proof types, and the credential issuance endpoint URL. The structure of the response adapts based on the version query parameter, supporting formats like latest, vd12 - VCI draft 12, or vd11 - VCI draft 11, and only includes active credential configurations. This endpoint enables clients to discover how to interact with the issuer and what credential types and formats are available for issuance.'
      operationId: getCredentialIssuerMetadata
      parameters:
        - name: version
          in: query
          required: false
          schema:
            type: string
            default: latest
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CredentialIssuerMetadataDTO'
      servers:
        - url: 'http://localhost:8090/v1/certify'
          description: Generated server url
  /ledger-search:
    post:
      tags:
        - Ledger Search
      summary: Search for Credential Status Records (Ledger Search)
      description: 'Search based on credentialId, issuerId, and potentially indexedAttributes (via specific criteria) from the ledger. AND logic applied.'
      operationId: searchLedgerRecords
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CredentialSearchCriteria'
      responses:
        '200':
          description: List of matching credential status records.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CredentialStatusResponseDto'
        '204':
          description: No matching records found.
        '400':
          description: Invalid search criteria provided.
      servers:
        - url: 'http://localhost:8090/v1/certify'
          description: Generated server url
  /issuance/credential/status:
    post:
      tags:
        - Credential Status
      summary: Update Credential Status
      description: |
        Updates the status of an issued credential. This is the primary endpoint for changing a credential's status (e.g., revoking, suspending, activating by setting the 'status' boolean). It can potentially assign a credential to a status list index using fields within the 'credentialStatus' object. This operation is potentially complex: if a status list mechanism (like Bitstring Status List v1.0) is used, this may trigger fetching the relevant Status List VC, modifying its `encodedList`, calculating a new proof, and storing the updated Status List VC, in addition to updating the local credential status record. Requires appropriate authorization. This endpoint directly applies the status change. compliant to https://w3c-ccg.github.io/vc-api/#update-status
      operationId: updateCredentialStatus
      requestBody:
        description: 'Specifies the credential to update, the new status value, and associated status mechanism details.'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCredentialStatusRequestDto'
      responses:
        '200':
          description: Credential status successfully updated. Returns the updated status record.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CredentialStatusResponseDto'
        '400':
          description: 'Bad Request - Invalid input data (e.g., missing required fields, invalid format).'
        '403':
          description: Forbidden - Caller does not have permission to update the status of this credential.
        '404':
          description: Not Found - The specified credentialId or referenced statusListCredential URL does not exist in the system.
        '409':
          description: 'Conflict - The requested status update cannot be performed (e.g., index already allocated and conflict occurs, state transition not allowed).'
        '500':
          description: 'Internal Server Error - An error occurred during the status update process (e.g., failed to update Status List VC).'
      servers:
        - url: 'http://localhost:8090/v1/certify'
          description: Generated server url
  '/status-list/{id}':
    get:
      tags:
        - Status List
      summary: Get Status List by ID
      description: |
        Retrieves a specific full Status List vc JSON document by its Identifier (URL/URN/DID). This endpoint returns the raw VC content as stored.
      operationId: getStatusListById
      parameters:
        - name: timestamp
          in: query
          description: Optional timestamp for time-based retrieval (if supported).
          required: false
          schema:
            type: string
            format: date-time
        - name: id
          in: path
          description: The unique ID (URL/URN/DID) of the Status List VC.
          required: true
          schema:
            type: string
            format: uri
      responses:
        '200':
          description: Status List Verifiable Credential found. Returns the full VC JSON document.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusListCredentialDto'
          headers:
            Cache-Control:
              schema:
                type: string
            ETag:
              schema:
                type: string
            Last-Modified:
              schema:
                type: string
                format: http-date
        '400':
          description: Invalid timestamp format.
        '404':
          description: Status List not found for the given ID. (STATUS_RETRIEVAL_ERROR)
        '500':
          description: Internal server error during retrieval. (STATUS_RETRIEVAL_ERROR)
      servers:
        - url: 'http://localhost:8090/v1/certify'
          description: Generated server url
tags:
  - name: cryptomanager
    description: Operation related to Encryption and Decryption
  - name: credential-config-controller
    description: Operations to manage credential configuration used for credential issuance
  - name: system-info-controller
    description: Operations to upload and fetch signature certificates
  - name: vc-issuance-controller
    description: Verifiable credential issuance and issuer metadata APIs
  - name: rendering-template-controller
    description: Operation for rendering template
components:
  schemas:
    CredentialConfigurationDTO:
      type: object
      required:
        - credentialType
        - credentialFormat
        - display
        - scope
        - cryptographic_binding_methods_supported
        - credential_signing_alg_values_supported
        - proof_types_supported
      properties:
        vcTemplate:
          type: string
          description: Base64 encoded template identifier for the Verifiable Credential. Mandatory if mosip.certify.plugin-mode is set to ‘DataProvider’ during creation.
        credentialConfigKeyId:
          type: string
          description: Unique key identifier for the credential configuration.
        context:
          type: array
          description: 'List of JSON-LD context URIs for the credential. It should be list of valid URI strings, will be mandatory for ldp_vc credential format.'
          items:
            type: string
        credentialType:
          type: array
          description: 'List of credential types (e.g., VerifiableCredential,FarmerCredential) as OpenID VCI specifications. Mandatory for ldp_vc format.'
          items:
            type: string
        sdJwtVct:
          type: string
          description: Represents the Verifiable Credential Type (VCT) used in Selective Disclosure JWT (SD-JWT) credentials. This field specifies the credential type identifier required for vc+sd-jwt format. It is mandatory when the credential format is vc+sd-jwt.
        credentialFormat:
          type: string
          description: 'Format of the credential. Valid values are ldp_vc, mso_mdoc, vc+sd-jwt.'
        didUrl:
          type: string
          description: URL of the Decentralized Identifier (DID) document. Mandatory for DataProvider plugin.
        keyManagerAppId:
          type: string
          description: Application ID for the key manager used in signing. Mandatory for DataProvider plugin.
        keyManagerRefId:
          type: string
          description: Reference ID for the key manager. Mandatory for DataProvider plugin.
        signatureAlgo:
          type: string
          description: 'Signature or proof algorithm used for credential signing. E.g., ES256, EdDSA, etc.'
        sdClaim:
          type: string
          description: Comma-separated list for selective disclosure claim configuration. Applicable for vc+sd-jwt credential type.
        display:
          type: array
          description: |-
            List of display properties for the credential. For e.g.

            "display": [
                    {
                        "name": "Example University",
                        "locale": "en-US"
                    },
                    {
                        "name": "Example Université",
                        "locale": "fr-FR"
                    }
                ]
          items:
            type: object
            additionalProperties:
              type: object
        order:
          type: array
          description: List specifying the order of claims or fields in the credential.
          items:
            type: string
        scope:
          type: string
          description: Scope value for the credential configuration.
        pluginConfigurations:
          type: array
          description: 'Holds a list of plugin-specific configuration parameters as key-value pairs. Each entry in the list represents configuration settings required by external plugins or modules integrated with the credential issuance process. This allows dynamic extension and customization of credential behavior based on the needs of different plugins, such as data providers, signature providers, or custom validation logic.'
          items:
            type: object
            additionalProperties:
              type: string
        cryptographic_binding_methods_supported:
          type: array
          description: 'Supported cryptographic binding methods. List, e.g., did, jwk.'
          items:
            type: string
        credential_signing_alg_values_supported:
          type: array
          description: 'Supported signing algorithms for credentials. List, e.g., ES256, EdDSA.'
          items:
            type: string
        proof_types_supported:
          type: object
          description: Supported proof types and their parameters.
          additionalProperties:
            type: object
        credentialSubject:
          type: object
          description: 'Represents the subject of the Verifiable Credential, containing the claims and attributes about the entity (such as a person, organization, or device) to whom the credential is issued. Applicable for ldp_vc credential type.'
          additionalProperties:
            type: object
        claims:
          type: object
          description: Claims included in the credential. Applicable for mso_mdoc and vc+sd-jwt credential formats.
          additionalProperties:
            type: object
        doctype:
          type: string
          description: Document type identifier for the credential. Mandatory for mso_mdoc credential format.
        signatureCryptoSuite:
          type: string
          description: 'Holds value for signature crypto suites supported for key algorithms like Ed25519Signature2020,EcdsaSecp256k1Signature2019, etc. It will also be applicable for data integrity proof crypto suites, for e.g. ecds-rdfc-2019, eddsa-rdfc-2022, etc. Mandatory for DataProvider plugin. The values should be only be those supported by certify.'
    CredentialConfigResponse:
      type: object
      properties:
        id:
          type: string
        status:
          type: string
      required:
        - id
        - status
    RequestWrapperUploadCertificateRequestDto:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the request.
        version:
          type: string
          description: API version of the request. Used to indicate the version of the contract or schema being used.
        requesttime:
          type: string
          format: date-time
          description: UTC timestamp when the request was sent.
        metadata:
          type: object
          description: 'Optional field for additional request-related information or custom attributes. Can be used to pass extra data needed for processing, auditing, or tracking the request.'
        request:
          $ref: '#/components/schemas/UploadCertificateRequestDto'
      required:
        - request
    UploadCertificateRequestDto:
      type: object
      properties:
        applicationId:
          type: string
          description: Identifier for the application the certificate is for.
        referenceId:
          type: string
          description: Optional reference for tracking or versioning.
        certificateData:
          type: string
          description: The signed certificate in PEM or DER format.
      required:
        - applicationId
        - certificateData
    ResponseWrapperUploadCertificateResponseDto:
      type: object
      properties:
        responseTime:
          type: string
          description: UTC timestamp when the response was generated.
        response:
          $ref: '#/components/schemas/UploadCertificateResponseDto'
        errors:
          type: array
          description: Technical details of error generated incase of error.
          items:
            type: object
            properties:
              cause:
                type: object
                properties:
                  stackTrace:
                    type: array
                    items:
                      type: object
                      properties:
                        classLoaderName:
                          type: string
                        moduleName:
                          type: string
                        moduleVersion:
                          type: string
                        methodName:
                          type: string
                        fileName:
                          type: string
                        lineNumber:
                          type: integer
                          format: int32
                        className:
                          type: string
                        nativeMethod:
                          type: boolean
                  message:
                    type: string
                  localizedMessage:
                    type: string
              stackTrace:
                type: array
                items:
                  type: object
                  properties:
                    classLoaderName:
                      type: string
                    moduleName:
                      type: string
                    moduleVersion:
                      type: string
                    methodName:
                      type: string
                    fileName:
                      type: string
                    lineNumber:
                      type: integer
                      format: int32
                    className:
                      type: string
                    nativeMethod:
                      type: boolean
              message:
                type: string
              suppressed:
                type: array
                items:
                  type: object
                  properties:
                    stackTrace:
                      type: array
                      items:
                        type: object
                        properties:
                          classLoaderName:
                            type: string
                          moduleName:
                            type: string
                          moduleVersion:
                            type: string
                          methodName:
                            type: string
                          fileName:
                            type: string
                          lineNumber:
                            type: integer
                            format: int32
                          className:
                            type: string
                          nativeMethod:
                            type: boolean
                    message:
                      type: string
                    localizedMessage:
                      type: string
              localizedMessage:
                type: string
    UploadCertificateResponseDto:
      type: object
      properties:
        status:
          type: string
          description: 'Status of the upload (e.g., SUCCESS, FAILURE).'
        timestamp:
          type: string
          description: UTC timestamp when upload operation was completed.
          format: date-time
    CredentialRequest:
      type: object
      required:
        - format
        - proof
      properties:
        format:
          type: string
          description: Format of the Credential to be issued.
        proof:
          $ref: '#/components/schemas/CredentialProof'
        credential_definition:
          $ref: '#/components/schemas/CredentialDefinition'
        doctype:
          type: string
          description: Type or category of the document for which the credential is being issued. Used to specify the intended document schema or classification.
        claims:
          type: object
          description: Claims asserted in the credential. A key-value map where each key is a claim name and the value is the corresponding claim data to be included in the issued credential.
          additionalProperties:
            type: object
        vct:
          type: string
          description: Represents the Verifiable Credential Type (VCT) used in Selective Disclosure JWT (SD-JWT) credentials. This field specifies the credential type identifier required for vc+sd-jwt format.
    CredentialProof:
      type: object
      properties:
        proof_type:
          type: string
          description: 'Type of proof provided (e.g., jwt, cwt).'
        jwt:
          type: string
          description: 'When proof type is jwt, a proof object MUST include a jwt claim.'
        cwt:
          type: string
          description: 'When proof type is cwt, a proof object MUST include a cwt claim.'
      required:
        - proof_type
    CredentialDefinition:
      type: object
      properties:
        type:
          type: array
          items:
            type: string
          description: List of credential type strings.
        credentialSubject:
          type: object
          additionalProperties:
            type: object
          description: Map defining the schema and fields for the credential subject.
        '@context':
          type: array
          items:
            type: string
          description: List of JSON-LD context URIs.
      required:
        - type
    CredentialResponse:
      type: object
      properties:
        format:
          type: string
          description: JSON string denoting the format of the issued Credential.
        credential:
          type: object
          description: 'The issued credential itself. Its type is generic and may be a JSON string or object, depending on the credential format. Must be present if acceptance_token is not returned.'
        acceptance_token:
          type: string
          description: A JSON string containing a security token used to subsequently obtain a credential. Must be present if credential is not returned.
        c_nonce:
          type: string
          description: 'A JSON string representing a nonce value, used to create a proof of possession of key material.'
        c_nonce_expires_in:
          type: integer
          format: int32
          description: A JSON integer specifying the lifetime (in seconds) of the c_nonce.
    VCError:
      type: object
      properties:
        error:
          type: string
        error_description:
          type: string
        c_nonce:
          type: string
        c_nonce_expires_in:
          type: integer
          format: int32
    ResponseWrapperKeyPairGenerateResponseDto:
      type: object
      properties:
        responseTime:
          type: string
          description: UTC timestamp when the response was generated.
        response:
          $ref: '#/components/schemas/KeyPairGenerateResponseDto'
        errors:
          type: array
          description: Technical details of error generated incase of error.
          items:
            type: object
            properties:
              cause:
                type: object
                properties:
                  stackTrace:
                    type: array
                    items:
                      type: object
                      properties:
                        classLoaderName:
                          type: string
                        moduleName:
                          type: string
                        moduleVersion:
                          type: string
                        methodName:
                          type: string
                        fileName:
                          type: string
                        lineNumber:
                          type: integer
                          format: int32
                        className:
                          type: string
                        nativeMethod:
                          type: boolean
                  message:
                    type: string
                  localizedMessage:
                    type: string
              stackTrace:
                type: array
                items:
                  type: object
                  properties:
                    classLoaderName:
                      type: string
                    moduleName:
                      type: string
                    moduleVersion:
                      type: string
                    methodName:
                      type: string
                    fileName:
                      type: string
                    lineNumber:
                      type: integer
                      format: int32
                    className:
                      type: string
                    nativeMethod:
                      type: boolean
              message:
                type: string
              suppressed:
                type: array
                items:
                  type: object
                  properties:
                    stackTrace:
                      type: array
                      items:
                        type: object
                        properties:
                          classLoaderName:
                            type: string
                          moduleName:
                            type: string
                          moduleVersion:
                            type: string
                          methodName:
                            type: string
                          fileName:
                            type: string
                          lineNumber:
                            type: integer
                            format: int32
                          className:
                            type: string
                          nativeMethod:
                            type: boolean
                    message:
                      type: string
                    localizedMessage:
                      type: string
              localizedMessage:
                type: string
    KeyPairGenerateResponseDto:
      type: object
      properties:
        certificate:
          type: string
          description: X509 self-signed certificate in PEM format.
        certSignRequest:
          type: string
          description: 'Certificate Signing Request (CSR) data, typically in PEM format. May be null if not applicable.'
        issuedAt:
          type: string
          format: date-time
          description: Timestamp (UTC) when the certificate was issued.
        expiryAt:
          type: string
          format: date-time
          description: Timestamp (UTC) when the certificate will expire.
        timestamp:
          type: string
          format: date-time
          description: Timestamp (UTC) representing when the public key was generated.
    CredentialIssuerMetadataDTO:
      type: object
      properties:
        display:
          type: array
          description: 'List of localized display information (such as name, logo, and description) for the credential issuer, used for UI presentation in wallets.'
          items:
            type: object
            additionalProperties:
              type: string
        credential_issuer:
          type: string
          description: The identifier (URL or DID) of the credential issuer. Used by wallets to recognize the issuer of verifiable credentials.
        authorization_servers:
          type: array
          description: List of OAuth 2.0/OpenID Connect authorization server URLs that can be used for credential issuance authorization.
          items:
            type: string
        credential_endpoint:
          type: string
          description: The API endpoint URL where clients can request credential issuance.
        credential_configurations_supported:
          type: object
          description: Map of Verifiable Credential level configuration information.
          additionalProperties:
            $ref: '#/components/schemas/CredentialConfigurationSupportedDTO'
    CredentialConfigurationSupportedDTO:
      type: object
      properties:
        format:
          type: string
          description: 'The credential format supported (e.g., ldp_vc, mso_mdoc, vc+sd-jwt).'
        scope:
          type: string
          description: The OAuth2 scope value associated with this credential configuration.
        claims:
          type: object
          additionalProperties:
            type: object
          description: Map of claim definitions for the credential (used for mso_mdoc and vc+sd-jwt).
        display:
          type: array
          items:
            type: object
            additionalProperties:
              type: object
          description: 'List of localized display information for the credential (name, description, logo, etc.).'
        order:
          type: array
          items:
            type: string
          description: List specifying the display order of claims or fields in the credential.
        doctype:
          type: string
          description: 'Document type identifier, used for mDL/mDoc credentials.'
        cryptographic_binding_methods_supported:
          type: array
          items:
            type: string
          description: 'List of supported cryptographic binding methods (e.g., did, holder\_binding).'
        credential_signing_alg_values_supported:
          type: array
          items:
            type: string
          description: 'List of supported credential signing algorithms (e.g., ES256, EdDSA).'
        proof_types_supported:
          type: object
          additionalProperties:
            type: object
          description: 'Map of supported proof types and their parameters (e.g., jwt, ldp).'
        credential_definition:
          description: 'Defines the structure and schema of the Verifiable Credential for the ldp_vc format. Specifies JSON-LD contexts, credential types, and the subject field.'
          $ref: '#/components/schemas/CredentialDefinition'
    CredentialSearchCriteria:
      type: object
      description: Criteria for searching Credential Status records from the ledger. AND logic applied. Missing fields are not used for filtering. indexedAttributesEquals allows searching on data previously stored in the ledger.indexedAttributes column.
      properties:
        credentialId:
          type: string
          nullable: true
          description: Filter by credential system ID (ledger.credential_id).
        issuerId:
          type: string
          nullable: true
          description: Filter by credential issuer's ID (ledger.issuer_id).
        credentialType:
          type: string
          nullable: true
          description: Filter by credential type (ledger.credential_type).
        indexedAttributesEquals:
          type: object
          nullable: true
          description: Map for exact match on specific indexed attribute key-value pairs previously stored in ledger.indexed_attributes.
          additionalProperties:
            type: string
    CredentialStatusResponseDto:
      type: object
      description: 'Representation of a Credential Status record read from the system, reflecting the ''ledger'' table structure (excluding indexedAttributes) and current status from ''credential_status'' table.'
      properties:
        credentialId:
          type: string
          description: Unique identifier of the credential whose status is being tracked (from ledger.credential_id).
        issuerId:
          type: string
          description: Identifier of the issuer of the credential being tracked (from ledger.issuer_id).
        statusListCredentialUrl:
          type: string
          nullable: true
          description: Reference to the ID (URL/DID/URN) of the Status List VC used for this credential's current status (from credential_status.status_list_credential_id where is_current=true). Null if not linked.
          format: uri
        statusListIndex:
          type: integer
          nullable: true
          description: The zero-based index within the referenced Status List corresponding to this credential's current status (from credential_status.status_list_index where is_current=true). Null if not linked.
          format: int64
        statusPurpose:
          type: string
          nullable: true
          description: The purpose associated with the current status check (from credential_status.status_purpose where is_current=true).
        issueDate:
          type: string
          description: Issuance date of the credential being tracked (from ledger.issue_date).
          format: date-time
        expirationDate:
          type: string
          nullable: true
          description: 'Expiration date of the credential being tracked, if applicable (from ledger.expiration_date).'
          format: date-time
        credentialType:
          type: string
          description: The type(s) of the credential being tracked (from ledger.credential_type).
        statusTimestamp:
          type: string
          description: Timestamp of when the current status became effective (from credential_status.status_timestamp where is_current=true).
          format: date-time
      required:
        - credentialId
        - issuerId
        - issueDate
        - credentialType
    UpdateCredentialStatusRequestDto:
      type: object
      properties:
        credentialId:
          type: string
          description: System identifier for the credential status record to update.
        credentialStatus:
          type: object
          description: 'Object containing details related to the credential''s status mechanism, especially if using a status list.'
          properties:
            id:
              type: string
              nullable: true
              description: 'The identifier for the credential status entry itself (e.g., https://example.com/status/1#123). Optional, system may generate/manage.'
              format: uri
            type:
              type: string
              nullable: true
              description: 'The type of the status mechanism being used (e.g., StatusList2021Entry). Optional, may be inferred or managed by system.'
            statusPurpose:
              type: string
              nullable: true
              description: 'Indicates the purpose of the status (e.g., ''revocation'', ''suspension''). Determines interpretation of the ''status'' bit. Should align with system policy/list purpose.'
            statusListIndex:
              type: integer
              nullable: true
              description: The index assigned to this credential within the referenced status list. Required if using StatusList.
              format: int64
            statusListCredential:
              type: string
              nullable: true
              description: The URL/ID of the Status List VC document to use. Required if using StatusList.
              format: uri
        status:
          type: boolean
          description: 'The new status value (true typically means ''status asserted'', e.g., revoked/suspended; false means ''status not asserted''). Interpretation depends on statusPurpose and system policy.'
        indexAllocator:
          type: string
          nullable: true
          description: Optional hint or identifier for index allocation strategy or service component. Usage is implementation-defined.
      required:
        - credentialId
        - credentialStatus
        - status
    StatusListCredentialDto:
      type: object
      description: |
        Representation of a Status List Verifiable Credential (JSON-LD format), typically conforming to StatusList2021Credential or similar specs. This schema reflects the standard VC structure, not system-specific metadata added in the database.
      additionalProperties: false
      properties:
        '@context':
          description: JSON-LD context.
          oneOf:
            - type: string
            - type: array
              items:
                type: string
        id:
          type: string
          description: Unique ID of the Status List VC.
          format: uri
        type:
          type: array
          description: 'VC Type(s), e.g., [''VerifiableCredential'', ''StatusList2021Credential''].'
          items:
            type: string
        issuer:
          description: Issuer of the Status List VC.
          oneOf:
            - type: string
              format: uri
            - type: object
              properties:
                id:
                  type: string
                  format: uri
              required:
                - id
        validFrom:
          type: string
          description: Timestamp from which the status list is valid.
          format: date-time
        validUntil:
          type: string
          nullable: true
          description: Optional timestamp until which the status list is valid.
          format: date-time
        credentialSubject:
          type: object
          description: The subject containing the actual status list data.
          additionalProperties: false
          properties:
            id:
              type: string
              description: 'Subject ID, often relates to the list''s purpose or identity.'
              format: uri
            type:
              type: string
              description: 'Type of the subject, e.g., ''StatusList2021''.'
            statusPurpose:
              type: string
              nullable: true
              description: 'Default purpose if not specified elsewhere (e.g., ''revocation''). Optional depending on spec.'
            encodedList:
              type: string
              description: 'The compressed status list, typically base64url encoded.'
          required:
            - id
            - type
            - encodedList
        proof:
          type: object
          nullable: true
          description: Cryptographic proof ensuring the integrity and authenticity of the Status List VC.
          additionalProperties: false
          properties:
            type:
              type: string
              description: 'Type of the proof (e.g., Ed25519Signature2020).'
            created:
              type: string
              description: Timestamp of proof creation.
              format: date-time
            verificationMethod:
              type: string
              description: Identifier of the key used for the proof.
              format: uri
            proofPurpose:
              type: string
              description: 'Purpose of the proof (e.g., assertionMethod).'
            proofValue:
              type: string
              description: 'The proof value (e.g., signature), often base58btc or similar encoding.'
      required:
        - '@context'
        - id
        - type
        - issuer
        - validFrom
        - credentialSubject