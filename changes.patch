diff --git a/.gitignore b/.gitignore
index 2424c1e..e75e8f4 100644
--- a/.gitignore
+++ b/.gitignore
@@ -29,4 +29,5 @@ target/
 .mvn/
 .project/
 helm/*/Chart.lock
-helm/*/charts/
\ No newline at end of file
+helm/*/charts/
+.qodo
diff --git a/certify-core/src/main/java/io/mosip/certify/core/constants/ErrorConstants.java b/certify-core/src/main/java/io/mosip/certify/core/constants/ErrorConstants.java
index 3b178bf..798ba40 100644
--- a/certify-core/src/main/java/io/mosip/certify/core/constants/ErrorConstants.java
+++ b/certify-core/src/main/java/io/mosip/certify/core/constants/ErrorConstants.java
@@ -30,4 +30,7 @@ public class ErrorConstants {
     public static final String UNSUPPORTED_ALGORITHM = "unsupported_algorithm";
     public static final String INVALID_CERTIFICATE = "invalid_certificate";
     public static final String VERIFICATION_METHOD_GENERATION_FAILED = "verification_method_generation_failed";
+    public static final String MISSING_STATUS_LIST_INDEX = "Status list index is required";
+    public static final String MISSING_STATUS_PURPOSE = "Status purpose is required";
+    public static final String INVALID_STATUS_LIST_CREDENTIAL_URL = "Status list credential url is required";
 }
diff --git a/certify-core/src/main/java/io/mosip/certify/core/spi/VCIssuanceService.java b/certify-core/src/main/java/io/mosip/certify/core/spi/VCIssuanceService.java
index c7fa283..554b277 100644
--- a/certify-core/src/main/java/io/mosip/certify/core/spi/VCIssuanceService.java
+++ b/certify-core/src/main/java/io/mosip/certify/core/spi/VCIssuanceService.java
@@ -22,4 +22,11 @@ public interface VCIssuanceService {
     Map<String, Object> getCredentialIssuerMetadata(String version);
 
     Map<String, Object> getDIDDocument();
+
+    Map<String, Object> verifyCredentialStatus(String statusListCredentialId, long statusListIndex, String statusPurpose);
+
+    Map<String, Object> revokeCredential(String statusListCredentialUrl, long statusListIndex, String statusPurpose);
+
+    Map<String, Object> revokeCredentialV1(String credentialSubject);
+
 }
diff --git a/certify-service/pom.xml b/certify-service/pom.xml
index 2699143..03f1ede 100644
--- a/certify-service/pom.xml
+++ b/certify-service/pom.xml
@@ -98,7 +98,7 @@
         <dependency>
             <groupId>info.weboftrust</groupId>
             <artifactId>ld-signatures-java</artifactId>
-            <version>1.0.0</version>
+            <version>1.5.0</version>
         </dependency>
         <dependency>
             <groupId>com.google.crypto.tink</groupId>
diff --git a/certify-service/src/main/java/io/mosip/certify/controller/VCIssuanceController.java b/certify-service/src/main/java/io/mosip/certify/controller/VCIssuanceController.java
index 490d8f2..7294841 100644
--- a/certify-service/src/main/java/io/mosip/certify/controller/VCIssuanceController.java
+++ b/certify-service/src/main/java/io/mosip/certify/controller/VCIssuanceController.java
@@ -7,6 +7,7 @@ package io.mosip.certify.controller;
 
 import io.mosip.certify.core.dto.CredentialRequest;
 import io.mosip.certify.core.dto.CredentialResponse;
+import io.mosip.certify.core.dto.CredentialRevokeRequest;
 import io.mosip.certify.core.dto.VCError;
 import io.mosip.certify.core.exception.CertifyException;
 import io.mosip.certify.core.spi.VCIssuanceService;
@@ -43,6 +44,29 @@ public class VCIssuanceController {
         return vcIssuanceService.getCredential(credentialRequest);
     }
 
+    @GetMapping("/credential/status/{id}")
+    public Map<String, Object> verifyCredentialStatus(
+            @PathVariable("id") String statusListCredentialId,
+            @RequestParam("statusListIndex") long statusListIndex,
+            @RequestParam("statusPurpose") String statusPurpose) {
+        return vcIssuanceService.verifyCredentialStatus(statusListCredentialId, statusListIndex, statusPurpose);
+    }
+
+    @PostMapping("/credential/revoke")
+    public Map<String, Object> revokeCredential(@Valid @RequestBody CredentialRevokeRequest request) {
+        return vcIssuanceService.revokeCredential(
+            request.getStatusListCredentialUrl(),
+            request.getStatusListIndex(),
+            request.getStatusPurpose()
+        );
+    }
+
+
+    @PostMapping("/v1/revoke")
+    public Map<String, Object> revokeCredentialV1(@RequestBody String requestBody) {
+        return vcIssuanceService.revokeCredentialV1(requestBody);
+    }
+
 
     /**
      * 1. The credential Endpoint MUST accept Access Tokens
diff --git a/certify-service/src/main/java/io/mosip/certify/entity/LedgerIssuanceTable.java b/certify-service/src/main/java/io/mosip/certify/entity/LedgerIssuanceTable.java
index 7a93f29..b5d575a 100644
--- a/certify-service/src/main/java/io/mosip/certify/entity/LedgerIssuanceTable.java
+++ b/certify-service/src/main/java/io/mosip/certify/entity/LedgerIssuanceTable.java
@@ -66,4 +66,7 @@ public class LedgerIssuanceTable {
 
     @Column(name = "revocation_proof", length = 512)
     private String revocationProof;
+
+    @Column(name = "credential_subject_hash", nullable = false, unique = true)
+    private String credentialSubjectHash;
 }
\ No newline at end of file
diff --git a/certify-service/src/main/java/io/mosip/certify/proofgenerators/Ed25519Signature2020ProofGenerator.java b/certify-service/src/main/java/io/mosip/certify/proofgenerators/Ed25519Signature2020ProofGenerator.java
index ef1122f..9858cd7 100644
--- a/certify-service/src/main/java/io/mosip/certify/proofgenerators/Ed25519Signature2020ProofGenerator.java
+++ b/certify-service/src/main/java/io/mosip/certify/proofgenerators/Ed25519Signature2020ProofGenerator.java
@@ -12,6 +12,8 @@ import io.mosip.kernel.signature.service.SignatureServicev2;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.stereotype.Component;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import java.util.Map;
 
@@ -23,6 +25,8 @@ import java.util.Map;
 @ConditionalOnProperty(name = "mosip.certify.data-provider-plugin.issuer.vc-sign-algo", havingValue = SignatureAlg.ED25519_SIGNATURE_SUITE_2020)
 public class Ed25519Signature2020ProofGenerator implements ProofGenerator {
 
+    private static final Logger logger = LoggerFactory.getLogger(Ed25519Signature2020ProofGenerator.class);
+
     @Autowired
     SignatureServicev2 signatureService;
 
@@ -30,24 +34,54 @@ public class Ed25519Signature2020ProofGenerator implements ProofGenerator {
 
     @Override
     public String getName() {
+        logger.debug("Getting name for the proof generator.");
         return SignatureAlg.ED25519_SIGNATURE_SUITE_2020;
     }
 
     @Override
     public Canonicalizer getCanonicalizer() {
+        logger.debug("Returning canonicalizer: {}", canonicalizer.getClass().getName());
         return canonicalizer;
     }
 
     @Override
     public LdProof generateProof(LdProof vcLdProof, String vcEncodedHash, Map<String, String> keyID) {
-        SignRequestDtoV2 srd = new SignRequestDtoV2();
-        srd.setApplicationId(keyID.get(Constants.APPLICATION_ID));
-        srd.setReferenceId(keyID.get(Constants.REFERENCE_ID));
-        srd.setDataToSign(vcEncodedHash);
-        srd.setResponseEncodingFormat("base58btc");
-        srd.setSignAlgorithm(JWSAlgorithm.EdDSA);
-        SignResponseDto s = signatureService.signv2(srd);
-        return LdProof.builder().base(vcLdProof).defaultContexts(false)
-                .proofValue(s.getSignature()).build();
+        logger.info("Starting proof generation with keyID: {}", keyID);
+        try {
+            // Creating the sign request
+            SignRequestDtoV2 srd = new SignRequestDtoV2();
+            srd.setApplicationId(keyID.get(Constants.APPLICATION_ID));
+            srd.setReferenceId(keyID.get(Constants.REFERENCE_ID));
+            srd.setDataToSign(vcEncodedHash);
+            srd.setResponseEncodingFormat("base58btc");
+            srd.setSignAlgorithm(JWSAlgorithm.EdDSA);
+
+            logger.info("SignRequestDtoV2 created with Application ID: {}, Reference ID: {}", srd.getApplicationId(), srd.getReferenceId());
+
+            // Calling the signature service to sign
+            logger.info("Signing data with algorithm: {}", JWSAlgorithm.EdDSA);
+            SignResponseDto signatureResponse = signatureService.signv2(srd);
+
+            // Logging the response from the signature service
+            if (signatureResponse != null) {
+                logger.info("Signature generated successfully. Signature length: {}", signatureResponse.getSignature().length());
+            } else {
+                logger.error("Signature response is null. Unable to generate proof.");
+            }
+
+            // Building the LdProof
+            LdProof ldProof = LdProof.builder()
+                    .base(vcLdProof)
+                    .defaultContexts(false)
+                    .proofValue(signatureResponse != null ? signatureResponse.getSignature() : null)
+                    .build();
+
+            logger.info("LdProof generated successfully.");
+            return ldProof;
+
+        } catch (Exception e) {
+            logger.error("Error during proof generation: {}", e.getMessage(), e);
+            throw new RuntimeException("Error while generating proof for Ed25519Signature2020", e);
+        }
     }
 }
diff --git a/certify-service/src/main/java/io/mosip/certify/repository/LedgerIssuanceTableRepository.java b/certify-service/src/main/java/io/mosip/certify/repository/LedgerIssuanceTableRepository.java
index 6b20ec5..6b65690 100644
--- a/certify-service/src/main/java/io/mosip/certify/repository/LedgerIssuanceTableRepository.java
+++ b/certify-service/src/main/java/io/mosip/certify/repository/LedgerIssuanceTableRepository.java
@@ -32,4 +32,16 @@ public interface LedgerIssuanceTableRepository extends JpaRepository<LedgerIssua
     
     @Query("SELECT cs FROM LedgerIssuanceTable cs WHERE cs.credentialStatus = 'valid' AND cs.expirationDate <= :date")
     List<LedgerIssuanceTable> findExpiredCredentials(@Param("date") LocalDateTime date);
+
+    @Query("SELECT l FROM LedgerIssuanceTable l WHERE l.issuerId = :issuerId AND l.statusPurpose = :statusPurpose AND l.statusListIndex = (" +
+       "SELECT MAX(l2.statusListIndex) FROM LedgerIssuanceTable l2 WHERE l2.issuerId = :issuerId AND l2.statusPurpose = :statusPurpose AND l2.statusListCredential = l.statusListCredential)")
+    Optional<LedgerIssuanceTable> findLatestStatusListInfo(@Param("issuerId") String issuerId, @Param("statusPurpose") String statusPurpose);
+
+    Optional<LedgerIssuanceTable> findByIssuerIdAndStatusPurposeAndCredentialSubjectHash(
+    String issuerId, String statusPurpose, String credentialSubjectHash);
+
+    Optional<LedgerIssuanceTable> findByStatusListIndex(long statusListIndex);
+
+    Optional<LedgerIssuanceTable> findByCredentialSubjectHash(String credentialSubjectHash);
+
 }
\ No newline at end of file
diff --git a/certify-service/src/main/java/io/mosip/certify/services/BitStringStatusListService.java b/certify-service/src/main/java/io/mosip/certify/services/BitStringStatusListService.java
index 864312f..bc6568d 100644
--- a/certify-service/src/main/java/io/mosip/certify/services/BitStringStatusListService.java
+++ b/certify-service/src/main/java/io/mosip/certify/services/BitStringStatusListService.java
@@ -8,20 +8,21 @@ import lombok.extern.slf4j.Slf4j;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Service;
 
+import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import java.time.LocalDateTime;
 import java.util.Base64;
 import java.util.List;
 import java.util.Optional;
-import java.util.UUID;
+import java.util.zip.GZIPInputStream;
 import java.util.zip.GZIPOutputStream;
 
 @Slf4j
 @Service
 public class BitStringStatusListService {
 
-    private static final int MINIMUM_BITSTRING_SIZE = 16 * 1024; // 16 KB
+    private static final int MINIMUM_BITSTRING_SIZE = 131072; // 16 KB
     private static final int STATUS_SIZE = 1; // Default status size as per spec
 
     @Autowired
@@ -66,9 +67,9 @@ public class BitStringStatusListService {
         String compressedBitstring = compressAndEncodebitstring(bitstring);
 
         // Create or update status list credential
-        String statusListId = domainUrl + "/credential/status/" + UUID.randomUUID().toString();
+        // String statusListId = domainUrl
         StatusListCredential statusList = new StatusListCredential();
-        statusList.setId(statusListId);
+        statusList.setId(domainUrl);
         statusList.setIssuerId(issuerId);
         statusList.setStatusPurpose(statusPurpose);
         statusList.setEncodedList(compressedBitstring);
@@ -77,7 +78,7 @@ public class BitStringStatusListService {
 
         statusListCredentialRepository.save(statusList);
 
-        return statusListId;
+        return domainUrl;
     }
 
     /**
@@ -112,6 +113,11 @@ public class BitStringStatusListService {
             throw new RuntimeException("Status List Length Too Short");
         }
 
+        Optional<LedgerIssuanceTable> issuanceRecord = ledgerIssuanceTableRepository.findByStatusListIndex(statusListIndex);
+        if (issuanceRecord.isEmpty()) {
+            throw new RuntimeException("Credential has not been issued for the provided index");
+        }
+
         // Check credential status
         int index = (int) (statusListIndex * STATUS_SIZE);
         if (index >= uncompressedBitstring.length) {
@@ -149,12 +155,67 @@ public class BitStringStatusListService {
     private byte[] decompressAndDecodebitstring(String compressedBitstring) {
         try {
             byte[] compressedBytes = Base64.getUrlDecoder().decode(compressedBitstring);
-            // Implement GZIP decompression logic here
-            // This is a placeholder and needs proper GZIP decompression implementation
-            return compressedBytes;
-        } catch (Exception e) {
+            try (ByteArrayInputStream bais = new ByteArrayInputStream(compressedBytes);
+                 GZIPInputStream gzipIS = new GZIPInputStream(bais);
+                 ByteArrayOutputStream baos = new ByteArrayOutputStream()) {
+                byte[] buffer = new byte[8192];
+                int bytesRead;
+                while ((bytesRead = gzipIS.read(buffer)) != -1) {
+                    baos.write(buffer, 0, bytesRead);
+                }
+                return baos.toByteArray();
+            }
+        } catch (IOException e) {
             log.error("Error decompressing bitstring", e);
             throw new RuntimeException("Bitstring Decompression Failed", e);
         }
     }
-}
\ No newline at end of file
+
+    public void revokeCredential(String statusListCredentialUrl, long statusListIndex, String statusPurpose) {
+        Optional<StatusListCredential> statusListOptional = statusListCredentialRepository.findById(statusListCredentialUrl);
+        System.out.println("Status List Credential found: " + statusListOptional);
+        if (statusListOptional.isEmpty()) {
+            throw new RuntimeException("Status List Credential not found");
+        }
+    
+        StatusListCredential statusList = statusListOptional.get();
+        if (!statusPurpose.equals(statusList.getStatusPurpose())) {
+            throw new RuntimeException("Status Purpose mismatch");
+        }
+
+        Optional<LedgerIssuanceTable> issuanceRecord = ledgerIssuanceTableRepository.findByStatusListIndex(statusListIndex);
+        if (issuanceRecord.isEmpty()) {
+            throw new RuntimeException("Credential has not been issued for the provided index");
+        }
+    
+        byte[] bitstring = decompressAndDecodebitstring(statusList.getEncodedList());
+        int index = (int) (statusListIndex * STATUS_SIZE);
+    
+        if (index >= bitstring.length) {
+            throw new RuntimeException("Status List Index Out of Range");
+        }
+    
+        bitstring[index] = 1; // Mark as revoked
+        String updatedEncodedList = compressAndEncodebitstring(bitstring);
+        statusList.setEncodedList(updatedEncodedList);
+        statusList.setValidFrom(LocalDateTime.now());
+    
+        statusListCredentialRepository.save(statusList);
+    }
+
+    public void revokeCredentialV1(String hashedCredentialSubject) {
+        Optional<LedgerIssuanceTable> issuanceRecordOptional = ledgerIssuanceTableRepository.findByCredentialSubjectHash(hashedCredentialSubject);
+        if (issuanceRecordOptional.isEmpty()) {
+            throw new RuntimeException("Credential has not been issued for the provided hash");
+        }
+    
+        LedgerIssuanceTable ledgerIssuanceRecord = issuanceRecordOptional.get();
+        
+        String statusListCredentialUrl = ledgerIssuanceRecord.getStatusListCredential();
+        long statusListIndex = ledgerIssuanceRecord.getStatusListIndex();
+        String statusPurpose = ledgerIssuanceRecord.getStatusPurpose();
+    
+        revokeCredential(statusListCredentialUrl, statusListIndex, statusPurpose);
+    }
+    
+}
diff --git a/certify-service/src/main/java/io/mosip/certify/services/CertifyIssuanceServiceImpl.java b/certify-service/src/main/java/io/mosip/certify/services/CertifyIssuanceServiceImpl.java
index 22ccc1d..c9834a3 100644
--- a/certify-service/src/main/java/io/mosip/certify/services/CertifyIssuanceServiceImpl.java
+++ b/certify-service/src/main/java/io/mosip/certify/services/CertifyIssuanceServiceImpl.java
@@ -23,7 +23,6 @@ import io.mosip.certify.core.exception.NotAuthenticatedException;
 import io.mosip.certify.core.spi.VCIssuanceService;
 import io.mosip.certify.core.util.AuditHelper;
 import io.mosip.certify.core.util.SecurityHelperService;
-import io.mosip.certify.api.spi.DataProviderPlugin;
 import io.mosip.certify.entity.LedgerIssuanceTable;
 import io.mosip.certify.entity.StatusListCredential;
 import io.mosip.certify.repository.LedgerIssuanceTableRepository;
@@ -48,13 +47,16 @@ import org.springframework.beans.factory.annotation.Value;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.security.oauth2.jwt.JwtClaimNames;
 import org.springframework.stereotype.Service;
+import java.security.NoSuchAlgorithmException;
 
 import java.lang.reflect.Method;
+import java.security.MessageDigest;
 import java.time.Instant;
 import java.time.LocalDateTime;
 import java.time.ZoneOffset;
 import java.util.*;
 import java.util.stream.Collectors;
+import org.apache.commons.lang3.tuple.Pair;
 
 @Slf4j
 @Service
@@ -128,6 +130,8 @@ public class CertifyIssuanceServiceImpl implements VCIssuanceService {
 
     private Map<String, Object> didDocument;
 
+    private static final int STATUS_LIST_MAX_INDEX = 131072;
+
     @Transactional
     @Override
     public CredentialResponse getCredential(CredentialRequest credentialRequest) {
@@ -162,11 +166,40 @@ public class CertifyIssuanceServiceImpl implements VCIssuanceService {
                 credentialRequest.getProof())) {
             throw new CertifyException(ErrorConstants.INVALID_PROOF);
         }
+        String credentialSubjectHash;
+        JSONObject jsonObject;
+
+        try {
+            parsedAccessToken.getClaims().put("accessTokenHash", parsedAccessToken.getAccessTokenHash());
+            jsonObject = dataProviderPlugin.fetchData(parsedAccessToken.getClaims());
+            credentialSubjectHash = hashCredentialSubject(jsonObject);
+
+        } catch (DataProviderExchangeException e) {
+            throw new CertifyException(e.getErrorCode());
+        } catch (Exception e) {
+            log.error("Unexpected error occurred while fetching data from dataProviderPlugin", e);
+            throw new CertifyException(ErrorConstants.VC_ISSUANCE_FAILED);
+        }
+
+        Optional<LedgerIssuanceTable> existingCredential = ledgerIssuanceTableRepository
+            .findByIssuerIdAndStatusPurposeAndCredentialSubjectHash(issuerId, "revocation", credentialSubjectHash);
+
+        if (existingCredential.isPresent()) {
+            log.info("VC already issued for issuerId={}, credentialSubjectHash={}", issuerId, credentialSubjectHash);
+            return getCredentialResponse(credentialRequest.getFormat(), getVerifiableCredential(
+                    credentialRequest,
+                    credentialMetadata,
+                    proofValidator.getKeyMaterial(credentialRequest.getProof()),
+                    existingCredential.get(),
+                    jsonObject
+            ));
+        }
 
-        // Add CredentialStatus Property
-        long statusListIndex = generateUniqueStatusListIndex();
-        String statusListCredentialUrl = getOrCreateStatusListCredential(issuerId, "revocation");
+        Pair<String, Long> statusListInfo = getStatusListInfo(issuerId, "revocation");
+        String statusListCredentialUrl = statusListInfo.getLeft();
+        long statusListIndex = statusListInfo.getRight();
 
+        getOrCreateStatusListCredential(issuerId, "revocation", statusListCredentialUrl);
         LedgerIssuanceTable ledgerIssuanceTable = new LedgerIssuanceTable();
         ledgerIssuanceTable.setId(statusListCredentialUrl+"#"+statusListIndex);
         ledgerIssuanceTable.setHolderId(proofValidator.getKeyMaterial(credentialRequest.getProof()));
@@ -176,16 +209,18 @@ public class CertifyIssuanceServiceImpl implements VCIssuanceService {
         ledgerIssuanceTable.setStatusListCredential(statusListCredentialUrl);
         ledgerIssuanceTable.setStatusPurpose("revocation");
         ledgerIssuanceTable.setCredentialStatus("valid");
+        ledgerIssuanceTable.setCredentialSubjectHash(credentialSubjectHash);
         ledgerIssuanceTable.setIssueDate(LocalDateTime.now());
+        ledgerIssuanceTableRepository.save(ledgerIssuanceTable);
 
         // 4. Get VC from configured plugin implementation
         VCResult<?> vcResult = getVerifiableCredential(credentialRequest, credentialMetadata,
-                proofValidator.getKeyMaterial(credentialRequest.getProof()), ledgerIssuanceTable);
+                proofValidator.getKeyMaterial(credentialRequest.getProof()), ledgerIssuanceTable, jsonObject);
 
         auditWrapper.logAudit(Action.VC_ISSUANCE, ActionStatus.SUCCESS,
                 AuditHelper.buildAuditDto(parsedAccessToken.getAccessTokenHash(), "accessTokenHash"), null);
 
-        ledgerIssuanceTableRepository.save(ledgerIssuanceTable);
+        // ledgerIssuanceTableRepository.save(ledgerIssuanceTable);
         return getCredentialResponse(credentialRequest.getFormat(), vcResult);
     }
 
@@ -340,7 +375,7 @@ public class CertifyIssuanceServiceImpl implements VCIssuanceService {
     }
 
     private VCResult<?> getVerifiableCredential(CredentialRequest credentialRequest, CredentialMetadata credentialMetadata,
-                                                String holderId, LedgerIssuanceTable ledgerIssuanceTable) {
+                                                String holderId, LedgerIssuanceTable ledgerIssuanceTable, JSONObject jsonObject) {
         parsedAccessToken.getClaims().put("accessTokenHash", parsedAccessToken.getAccessTokenHash());
         VCRequestDto vcRequestDto = new VCRequestDto();
         vcRequestDto.setFormat(credentialRequest.getFormat());
@@ -364,7 +399,6 @@ public class CertifyIssuanceServiceImpl implements VCIssuanceService {
                 validateLdpVcFormatRequest(credentialRequest, credentialMetadata);
                 try {
                     // TODO(multitenancy): later decide which plugin out of n plugins is the correct one
-                    JSONObject jsonObject = dataProviderPlugin.fetchData(parsedAccessToken.getClaims());
                     Map<String, Object> templateParams = new HashMap<>();
                     templateParams.put(Constants.TEMPLATE_NAME, CredentialUtils.getTemplateName(vcRequestDto));
                     templateParams.put(Constants.ISSUER_URI, issuerURI);
@@ -374,13 +408,14 @@ public class CertifyIssuanceServiceImpl implements VCIssuanceService {
                     jsonObject.put("_holderId", holderId);
                     jsonObject.put("credentialStatus", new JSONObject(statusObject));
                     String unSignedVC = vcFormatter.format(jsonObject, templateParams);
+                    JSONObject formattedVC = new JSONObject(unSignedVC);
+                    formattedVC.put("credentialStatus", new JSONObject(statusObject));
+                    String finalUnsignedVC = formattedVC.toString();
                     Map<String, String> signerSettings = new HashMap<>();
                     // NOTE: This is a quasi implementation to add support for multi-tenancy.
                     signerSettings.put(Constants.APPLICATION_ID, keyChooser.get(vcSignAlgorithm).getFirst());
                     signerSettings.put(Constants.REFERENCE_ID, keyChooser.get(vcSignAlgorithm).getLast());
-                    vcResult = vcSigner.attachSignature(unSignedVC, signerSettings);
-                } catch(DataProviderExchangeException e) {
-                    throw new CertifyException(e.getErrorCode());
+                    vcResult = vcSigner.attachSignature(finalUnsignedVC, signerSettings);
                 } catch (JSONException e) {
                     log.error(e.getMessage(), e);
                     throw new CertifyException(ErrorConstants.UNKNOWN_ERROR);
@@ -471,16 +506,91 @@ public class CertifyIssuanceServiceImpl implements VCIssuanceService {
     }
 
 
-    private long generateUniqueStatusListIndex() {
-        return new Random().nextInt(131_072);
+    private Pair<String, Long> getStatusListInfo(String issuerId, String statusPurpose) {
+        Optional<LedgerIssuanceTable> latest = ledgerIssuanceTableRepository
+            .findLatestStatusListInfo(issuerId, statusPurpose);
+
+        if (latest.isEmpty()) {
+            // First-time creation
+            String newStatusListCredentialUrl = domainUrl + UUID.randomUUID();
+            return Pair.of(newStatusListCredentialUrl, 0L);
+        }
+
+        LedgerIssuanceTable latestEntry = latest.get();
+        if (latestEntry.getStatusListIndex() + 1 >= STATUS_LIST_MAX_INDEX) {
+            // Need to create a new file
+            String newStatusListCredentialUrl = domainUrl + UUID.randomUUID();
+            return Pair.of(newStatusListCredentialUrl, 0L);
+        }
+
+        // Reuse current statusListCredential
+        return Pair.of(latestEntry.getStatusListCredential(), latestEntry.getStatusListIndex() + 1);
     }
 
-    private String getOrCreateStatusListCredential(String issuerId, String statusPurpose) {
+
+    private String getOrCreateStatusListCredential(String issuerId, String statusPurpose, String statusListCredentialUrl) {
         return bitStringStatusListService.generateStatusListCredential(
                 issuerId,
                 statusPurpose,
-                domainUrl
+                statusListCredentialUrl
+        );
+    }
+    
+
+    public String hashCredentialSubject(JSONObject credentialSubject) {
+        try {
+            String credentialSubjectString = credentialSubject.toString();
+            // Get the MessageDigest instance for SHA-256 hashing
+            MessageDigest digest = MessageDigest.getInstance("SHA-256");
+            
+            // Convert the JSON string into a byte array
+            byte[] hashBytes = digest.digest(credentialSubjectString.getBytes());
+            
+            // Convert the byte array to a hex string
+            StringBuilder hexString = new StringBuilder();
+            for (byte b : hashBytes) {
+                hexString.append(String.format("%02x", b));
+            }
+            
+            // Print the hash
+            System.out.println("SHA-256 Hash: " + hexString.toString());
+            return hexString.toString();
+            
+        } catch (NoSuchAlgorithmException e) {
+            e.printStackTrace();
+            return null; 
+        }
+    }
+
+    @Override
+    public Map<String, Object> verifyCredentialStatus(String statusListCredentialId, long statusListIndex, String statusPurpose) {
+        String statusListCredentialUrl = domainUrl + statusListCredentialId;
+        boolean isValid = bitStringStatusListService.validateCredentialStatus(statusListCredentialUrl, statusListIndex, statusPurpose);
+        return Map.of(
+                "status", isValid ? "valid" : "revoked",
+                "statusListCredentialUrl", statusListCredentialUrl,
+                "statusListIndex", statusListIndex
         );
     }
 
+    @Override
+    public Map<String, Object> revokeCredential(String statusListCredentialUrl, long statusListIndex, String statusPurpose) {
+        bitStringStatusListService.revokeCredential(statusListCredentialUrl, statusListIndex, statusPurpose);
+        return Map.of("message", "Credential revoked successfully");
+    }
+
+    @Override
+    public Map<String, Object> revokeCredentialV1(String credentialSubjectJson) {
+        try {
+            JSONObject requestJson = new JSONObject(credentialSubjectJson);
+            JSONObject credentialSubject = requestJson.getJSONObject("credentialSubject");
+            String hashedCredentialSubject = hashCredentialSubject(credentialSubject);
+            bitStringStatusListService.revokeCredentialV1(hashedCredentialSubject);
+            return Map.of("message", "Credential revoked successfully");
+        } catch (JSONException e) {
+            e.printStackTrace();
+            return Map.of("error", "Invalid JSON string provided");
+        }
+    }
+
 }
\ No newline at end of file
diff --git a/certify-service/src/main/java/io/mosip/certify/services/VCIssuanceServiceImpl.java b/certify-service/src/main/java/io/mosip/certify/services/VCIssuanceServiceImpl.java
index 89c3c4e..e778f7d 100644
--- a/certify-service/src/main/java/io/mosip/certify/services/VCIssuanceServiceImpl.java
+++ b/certify-service/src/main/java/io/mosip/certify/services/VCIssuanceServiceImpl.java
@@ -38,10 +38,17 @@ import org.springframework.beans.factory.annotation.Value;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.security.oauth2.jwt.JwtClaimNames;
 import org.springframework.stereotype.Service;
+
+import java.security.MessageDigest;
+import java.security.NoSuchAlgorithmException;
 import java.time.Instant;
 import java.time.LocalDateTime;
 import java.time.ZoneOffset;
 import java.util.*;
+import io.mosip.certify.services.BitStringStatusListService;
+
+import org.json.JSONException;
+import org.json.JSONObject;
 
 @Slf4j
 @Service
@@ -72,6 +79,12 @@ public class VCIssuanceServiceImpl implements VCIssuanceService {
     @Autowired
     private AuditPlugin auditWrapper;
 
+    @Autowired
+    private BitStringStatusListService bitStringStatusListService;
+
+    @Value("${mosip.certify.domain.url}")
+    private String domainUrl;
+
     @Override
     public CredentialResponse getCredential(CredentialRequest credentialRequest) {
         boolean isValidCredentialRequest = new CredentialRequestValidator().isValid(credentialRequest);
@@ -382,4 +395,64 @@ public class VCIssuanceServiceImpl implements VCIssuanceService {
         transaction.setCNonceExpireSeconds(cNonceExpireSeconds);
         return vciCacheService.setVCITransaction(parsedAccessToken.getAccessTokenHash(), transaction);
     }
+
+
+    @Override
+    public Map<String, Object> verifyCredentialStatus(String statusListCredentialId, long statusListIndex, String statusPurpose) {
+        String statusListCredentialUrl = domainUrl + statusListCredentialId;
+        boolean isValid = bitStringStatusListService.validateCredentialStatus(statusListCredentialUrl, statusListIndex, statusPurpose);
+        return Map.of(
+                "status", isValid ? "valid" : "revoked",
+                "statusListCredentialUrl", statusListCredentialUrl,
+                "statusListIndex", statusListIndex
+        );
+    }
+
+    @Override
+    public Map<String, Object> revokeCredential(String statusListCredentialUrl, long statusListIndex, String statusPurpose) {
+        bitStringStatusListService.revokeCredential(statusListCredentialUrl, statusListIndex, statusPurpose);
+        return Map.of("message", "Credential revoked successfully");
+    }
+
+    @Override
+    public Map<String, Object> revokeCredentialV1(String credentialSubjectJson) {
+        try {
+            JSONObject requestJson = new JSONObject(credentialSubjectJson);
+            JSONObject credentialSubject = requestJson.getJSONObject("credentialSubject");
+            String hashedCredentialSubject = hashCredentialSubject(credentialSubject);
+            bitStringStatusListService.revokeCredentialV1(hashedCredentialSubject);
+            return Map.of("message", "Credential revoked successfully");
+        } catch (JSONException e) {
+            e.printStackTrace();
+            return Map.of("error", "Invalid JSON string provided");
+        }
+    }
+
+
+    public String hashCredentialSubject(JSONObject credentialSubject) {
+        System.out.println("credentialSubject" + credentialSubject);
+        try {
+            String credentialSubjectString = credentialSubject.toString();
+            // Get the MessageDigest instance for SHA-256 hashing
+            MessageDigest digest = MessageDigest.getInstance("SHA-256");
+            
+            // Convert the JSON string into a byte array
+            byte[] hashBytes = digest.digest(credentialSubjectString.getBytes());
+            
+            // Convert the byte array to a hex string
+            StringBuilder hexString = new StringBuilder();
+            for (byte b : hashBytes) {
+                hexString.append(String.format("%02x", b));
+            }
+            
+            // Print the hash
+            System.out.println("SHA-256 Hash: " + hexString.toString());
+            return hexString.toString();
+            
+        } catch (NoSuchAlgorithmException e) {
+            e.printStackTrace();
+            return null; 
+        }
+    }
+
 }
\ No newline at end of file
diff --git a/certify-service/src/main/java/io/mosip/certify/vcformatters/VelocityTemplatingEngineImpl.java b/certify-service/src/main/java/io/mosip/certify/vcformatters/VelocityTemplatingEngineImpl.java
index 164b9ae..669305b 100644
--- a/certify-service/src/main/java/io/mosip/certify/vcformatters/VelocityTemplatingEngineImpl.java
+++ b/certify-service/src/main/java/io/mosip/certify/vcformatters/VelocityTemplatingEngineImpl.java
@@ -27,6 +27,7 @@ import jakarta.annotation.PostConstruct;
 import lombok.SneakyThrows;
 import lombok.extern.slf4j.Slf4j;
 import org.apache.commons.lang3.StringUtils;
+import org.apache.logging.log4j.core.layout.SyslogLayout;
 import org.apache.velocity.VelocityContext;
 import org.apache.velocity.app.VelocityEngine;
 import org.apache.velocity.runtime.RuntimeConstants;
@@ -93,10 +94,13 @@ public class VelocityTemplatingEngineImpl implements VCFormatter {
         // 1. Prepare map
         // TODO: Eventually, the credentialSubject from the plugin will be templated as-is
         Map<String, Object> finalTemplate = new HashMap<>();
+        System.out.println("valueMap: " + valueMap);
         Iterator<String> keys = valueMap.keys();
+        System.out.println("keys: " + keys);
         while(keys.hasNext()) {
             String key = keys.next();
             Object value = valueMap.get(key);
+            System.out.println("key: " + key + ", value: " + value);
             if (value instanceof List) {
                 finalTemplate.put(key, new JSONArray((List<Object>) value));
             } else if (value.getClass().isArray()) {
@@ -111,6 +115,7 @@ public class VelocityTemplatingEngineImpl implements VCFormatter {
                 finalTemplate.put(key, value);
             }
         }
+        System.out.println("finalTemplate: " + finalTemplate);
         // Date: https://velocity.apache.org/tools/3.1/apidocs/org/apache/velocity/tools/generic/DateTool.html
         finalTemplate.put("_dateTool", new DateTool());
         // Escape: https://velocity.apache.org/tools/3.1/apidocs/org/apache/velocity/tools/generic/EscapeTool.html
@@ -141,12 +146,22 @@ public class VelocityTemplatingEngineImpl implements VCFormatter {
             finalTemplate.put(VCDM2Constants.VALID_FROM, ZonedDateTime.now(ZoneOffset.UTC).format(DateTimeFormatter.ofPattern(Constants.UTC_DATETIME_PATTERN)));
         }
         VelocityContext context = new VelocityContext(finalTemplate);
+        System.out.println("finalTemplate222222: " + finalTemplate);
+        System.out.println("context: " + context);
+        System.out.println("template: " + template);
+        System.out.println("engine: " + engine);
+        System.out.println("writer: " + writer);
+        System.out.println("templateName: " + templateName + "------" + template.toString());
         engine.evaluate(context, writer, /*logTag */ templateName,template.toString());
         if (StringUtils.isNotEmpty(idPrefix)) {
+            System.out.println("Adding ID");
             JSONObject j = new JSONObject(writer.toString());
+            System.out.println("j: " + j);
             j.put(VCDMConstants.ID, idPrefix + UUID.randomUUID());
+            System.out.println("j2222: " + j);
             return j.toString();
         }
+        System.out.println("Done final");
         return writer.toString();
     }
 
diff --git a/certify-service/src/main/java/io/mosip/certify/vcsigners/JsonLDVCSigner.java b/certify-service/src/main/java/io/mosip/certify/vcsigners/JsonLDVCSigner.java
index 4a9c864..ac84b10 100644
--- a/certify-service/src/main/java/io/mosip/certify/vcsigners/JsonLDVCSigner.java
+++ b/certify-service/src/main/java/io/mosip/certify/vcsigners/JsonLDVCSigner.java
@@ -68,11 +68,15 @@ public class JsonLDVCSigner implements VCSigner {
         //  timezone restriction, this will have to be supported timely.
         Date createDate = Date
                 .from(LocalDateTime
-                        .parse(validFrom,
-                                DateTimeFormatter.ofPattern(Constants.UTC_DATETIME_PATTERN))
+                        .parse(validFrom, DateTimeFormatter.ofPattern(Constants.UTC_DATETIME_PATTERN))
                         .atZone(ZoneId.systemDefault()).toInstant());
-        LdProof vcLdProof = LdProof.builder().defaultContexts(false).defaultTypes(false).type(proofGenerator.getName())
-                .created(createDate).proofPurpose(VCDMConstants.ASSERTION_METHOD)
+
+        LdProof vcLdProof = LdProof.builder()
+                .defaultContexts(false)
+                .defaultTypes(false)
+                .type(proofGenerator.getName())
+                .created(createDate)
+                .proofPurpose(VCDMConstants.ASSERTION_METHOD)
                 .verificationMethod(URI.create(issuerPublicKeyURI))
                 .build();
         // 1. Canonicalize
diff --git a/db_scripts/mosip_certify/ddl/certify-ledger_issuance_table.sql b/db_scripts/mosip_certify/ddl/certify-ledger_issuance_table.sql
index 597a004..b2ac0c2 100644
--- a/db_scripts/mosip_certify/ddl/certify-ledger_issuance_table.sql
+++ b/db_scripts/mosip_certify/ddl/certify-ledger_issuance_table.sql
@@ -18,7 +18,7 @@ CREATE TABLE certify.ledger_issuance_table(
     type character varying(50) NOT NULL DEFAULT 'BitstringStatusListEntry',
     status_list_index bigint NOT NULL,
     status_list_credential character varying(255) NOT NULL,
-    status_purpose character varying(50) NOT NULL,
+    status_purpose character varying(50),
     credential_status character varying(50) NOT NULL DEFAULT 'valid',
     status_size integer DEFAULT 1,
     status_message jsonb,
@@ -28,6 +28,7 @@ CREATE TABLE certify.ledger_issuance_table(
     revocation_timestamp timestamp,
     revocation_reason character varying(255),
     revocation_proof character varying(512),
+    credential_subject_hash character varying(512),
     CONSTRAINT pk_credential_status_id PRIMARY KEY (id),
     CONSTRAINT uk_credential_issuer UNIQUE (credential_id, issuer_id)
 );
@@ -53,4 +54,5 @@ COMMENT ON COLUMN certify.ledger_issuance_table.issue_date IS 'Date and time whe
 COMMENT ON COLUMN certify.ledger_issuance_table.expiration_date IS 'Date and time when the credential will expire (if applicable)';
 COMMENT ON COLUMN certify.ledger_issuance_table.revocation_timestamp IS 'Date and time when the credential was revoked (if applicable)';
 COMMENT ON COLUMN certify.ledger_issuance_table.revocation_reason IS 'Reason for revocation (if applicable)';
-COMMENT ON COLUMN certify.ledger_issuance_table.revocation_proof IS 'Cryptographic proof or hash representing the integrity of the revocation action';
\ No newline at end of file
+COMMENT ON COLUMN certify.ledger_issuance_table.revocation_proof IS 'Cryptographic proof or hash representing the integrity of the revocation action';
+COMMENT ON COLUMN certify.status_list_credential.encoded_list IS 'Multibase-encoded base64url representation of the GZIP-compressed bitstring values';
\ No newline at end of file
diff --git a/docker-compose/docker-compose-injistack/certify_init.sql b/docker-compose/docker-compose-injistack/certify_init.sql
index 6bce1e6..b35617a 100644
--- a/docker-compose/docker-compose-injistack/certify_init.sql
+++ b/docker-compose/docker-compose-injistack/certify_init.sql
@@ -97,6 +97,47 @@ CREATE TABLE certify.rendering_template (
                                     CONSTRAINT pk_svgtmp_id PRIMARY KEY (id)
 );
 
+CREATE TABLE certify.ledger_issuance_table(
+    id character varying(255) NOT NULL,
+    credential_id character varying(255) NOT NULL,
+    issuer_id character varying(255) NOT NULL,
+    holder_id character varying(1024) NOT NULL,
+    type character varying(50) NOT NULL DEFAULT 'BitstringStatusListEntry',
+    status_list_index bigint NOT NULL,
+    status_list_credential character varying(255) NOT NULL,
+    status_purpose character varying(50) NOT NULL,
+    credential_status character varying(50) NOT NULL DEFAULT 'valid',
+    status_size integer DEFAULT 1,
+    status_message jsonb,
+    status_reference character varying(512),
+    issue_date timestamp NOT NULL,
+    expiration_date timestamp,
+    revocation_timestamp timestamp,
+    revocation_reason character varying(255),
+    revocation_proof character varying(512),
+    credential_subject_hash character varying(512),
+    -- encoded_list TEXT NOT NULL,
+    CONSTRAINT pk_credential_status_id PRIMARY KEY (id),
+    CONSTRAINT uk_credential_issuer UNIQUE (credential_id, issuer_id)
+);
+
+CREATE TABLE certify.status_list_credential (
+    id CHARACTER VARYING(255) NOT NULL,
+    issuer_id CHARACTER VARYING(255) NOT NULL,
+    type CHARACTER VARYING(100) NOT NULL DEFAULT 'BitstringStatusListCredential',
+    encoded_list TEXT NOT NULL,
+    list_size INTEGER NOT NULL,
+    status_purpose CHARACTER VARYING(50) NOT NULL,
+    status_size INTEGER DEFAULT 1,
+    status_messages JSONB,
+    valid_from TIMESTAMP NOT NULL,
+    valid_until TIMESTAMP,
+    ttl BIGINT,
+    CONSTRAINT pk_status_list_credential_id PRIMARY KEY (id),
+    CONSTRAINT uk_issuer_purpose UNIQUE (issuer_id, status_purpose)
+);
+
+
 CREATE TABLE certify.credential_template(
                                     context character varying(1024) NOT NULL,
                                     credential_type character varying(512) NOT NULL,
@@ -106,66 +147,48 @@ CREATE TABLE certify.credential_template(
                                     CONSTRAINT pk_template PRIMARY KEY (context, credential_type)
 );
 
-INSERT INTO certify.credential_template (context, credential_type, template, cr_dtimes, upd_dtimes) VALUES ('https://www.w3.org/2018/credentials/v1', 'FarmerCredential,VerifiableCredential', '{
-     "@context": [
-         "https://www.w3.org/2018/credentials/v1",
-         "https://piyush7034.github.io/my-files/farmer.json",
-         "https://w3id.org/security/suites/ed25519-2020/v1"
-     ],
-     "issuer": "${_issuer}",
-     "type": [
-         "VerifiableCredential",
-         "FarmerCredential"
-     ],
-     "issuanceDate": "${validFrom}",
-     "expirationDate": "${validUntil}",
-     "credentialSubject": {
-         "fullName": "${fullName}",
-         "mobileNumber": "${mobileNumber}",
-         "dateOfBirth": "${dateOfBirth}",
-         "gender": "${gender}",
-         "state": "${state}",
-         "district": "${district}",
-         "villageOrTown": "${villageOrTown}",
-         "postalCode": "${postalCode}",
-         "landArea": "${landArea}",
-         "landOwnershipType": "${landOwnershipType}",
-         "primaryCropType": "${primaryCropType}",
-         "secondaryCropType": "${secondaryCropType}",
-         "face": "${face}",
-         "farmerID": "${farmerID}"
-     }
-}
-', '2024-10-24 12:32:38.065994', NULL);
-
-INSERT INTO certify.credential_template (context, credential_type, template, cr_dtimes, upd_dtimes) VALUES ('https://www.w3.org/ns/credentials/v2', 'FarmerCredential,VerifiableCredential', '{
+-- INSERT INTO certify.credential_template (context, credential_type, template, cr_dtimes, upd_dtimes) VALUES ('https://www.w3.org/2018/credentials/v1', 'StudentCredential,VerifiableCredential', '{
+--      "@context": [
+--          "https://www.w3.org/2018/credentials/v1",
+--          "https://nandeesh778.github.io/my-files/welearntt-courses.json",
+--          "https://w3id.org/security/suites/ed25519-2020/v1"
+--      ],
+--      "issuer": "${_issuer}",
+--      "type": [
+--          "VerifiableCredential",
+--          "StudentCredential"
+--      ],
+--      "issuanceDate": "${validFrom}",
+--      "expirationDate": "${validUntil}",
+--      "credentialSubject": {
+--         "uuid": "${uuid}",
+--         "email": "${email}",
+--         "cFullname": "${cFullname}",
+--         "dateRegistered": "${dateRegistered}",
+--         "courses": ${courses}
+--     }
+-- }
+-- ', '2024-10-24 12:32:38.065994', NULL);
+
+INSERT INTO certify.credential_template (context, credential_type, template, cr_dtimes, upd_dtimes) VALUES ('https://www.w3.org/ns/credentials/v2', 'StudentCredential,VerifiableCredential', '{
     "@context": [
         "https://www.w3.org/ns/credentials/v2",
-        "https://piyush7034.github.io/my-files/farmer.json",
+        "https://manjunathbhagwat12.github.io/my-files/courses.json",
         "https://w3id.org/security/suites/ed25519-2020/v1"
     ],
     "issuer": "${_issuer}",
     "type": [
         "VerifiableCredential",
-        "FarmerCredential"
+        "StudentCredential"
     ],
     "validFrom": "${validFrom}",
     "validUntil": "${validUntil}",
     "credentialSubject": {
-        "fullName": "${fullName}",
-        "mobileNumber": "${mobileNumber}",
-        "dateOfBirth": "${dateOfBirth}",
-        "gender": "${gender}",
-        "state": "${state}",
-        "district": "${district}",
-        "villageOrTown": "${villageOrTown}",
-        "postalCode": "${postalCode}",
-        "landArea": "${landArea}",
-        "landOwnershipType": "${landOwnershipType}",
-        "primaryCropType": "${primaryCropType}",
-        "secondaryCropType": "${secondaryCropType}",
-        "face": "${face}",
-        "farmerID": "${farmerID}"
+        "uuid": "${uuid}",
+        "email": "${email}",
+        "cFullname": "${cFullname}",
+        "dateRegistered": "${dateRegistered}",
+        "courses": ${courses}
     }
 }', '2024-10-24 12:32:38.065994', NULL);
 
diff --git a/docker-compose/docker-compose-injistack/config/certify-csvdp-farmer.properties b/docker-compose/docker-compose-injistack/config/certify-csvdp-farmer.properties
index 1a2be74..97789c8 100644
--- a/docker-compose/docker-compose-injistack/config/certify-csvdp-farmer.properties
+++ b/docker-compose/docker-compose-injistack/config/certify-csvdp-farmer.properties
@@ -5,22 +5,27 @@ mosip.certify.integration.vci-plugin=MockVCIssuancePlugin
 
 ## ------------------------------------------- Mock ID plugin related properties ------------------------------------------------------------
 mosip.certify.mock.vciplugin.verification-method=${mosip.certify.authn.jwk-set-uri}
-mosip.certify.mock.authenticator.get-identity-url=http://mock-identity-system:8082/v1/mock-identity-system/identity
+mosip.certify.mock.authenticator.get-identity-url=https://dev-itr.credissuer.com/mock-identity/v1/mock-identity-system/identity
 mosip.certify.cache.security.algorithm-name=AES/ECB/PKCS5Padding
 mosip.certify.cache.secure.individual-id=false
 mosip.certify.cache.store.individual-id=true
 mosip.certify.identifier=http://localhost:8090
 
-mosip.certify.data-provider-plugin.issuer-uri=did:web:vharsh.github.io:DID:harsh
-mosip.certify.data-provider-plugin.issuer-public-key-uri=did:web:vharsh.github.io:DID:harsh#key-0
+mosip.certify.data-provider-plugin.issuer-uri=did:web:Nandeesh778.github.io:certify-local4:certify_did
+mosip.certify.data-provider-plugin.issuer-public-key-uri=did:web:Nandeesh778.github.io:certify-local4:certify_did#key-0
 
 mosip.certify.plugin-mode=DataProvider
 mosip.certify.data-provider-plugin.id-field-prefix-uri=https://mosip.io/credential/
-mosip.certify.integration.data-provider-plugin=MockCSVDataProviderPlugin
+mosip.certify.integration.data-provider-plugin=WelearnttDataProviderPlugin
 mosip.certify.data-provider-plugin.issuer.vc-sign-algo=Ed25519Signature2020
+
+mosip.data-provider.url=https://run.mocky.io/v3/e0319db6-3e55-4fb4-8163-9ed50b611572
+mosip.data-provider.header-key=apikey
+mosip.certify.domain.url=https://d177-106-51-16-63.ngrok-free.app/v1/certify/issuance/credential/status/
+#mosip.certify.bitstring.public.url
 ## CSV specific config
-mosip.certify.mock.data-provider.csv.identifier-column=id
-mosip.certify.mock.data-provider.csv.data-columns=id,fullName,mobileNumber,dateOfBirth,gender,state,district,villageOrTown,postalCode,landArea,landOwnershipType,primaryCropType,secondaryCropType,face,farmerID
+mosip.certify.mock.data-provider.csv.identifier-column=studentId
+mosip.certify.mock.data-provider.csv.data-columns=studentId,studentDigitalId,gender,graduationDate,major,studentName,mobile,degree,osid,cgpa,osOwner,email
 mosip.certify.mock.data-provider.csv-registry-uri=/home/mosip/config/farmer_identity_data.csv
 mosip.certify.data-provider-plugin.rendering-template-id=
 mosip.certify.key-values={\
@@ -30,35 +35,41 @@ mosip.certify.key-values={\
               'credential_endpoint': '${mosipbox.public.url}${server.servlet.path}/issuance/credential', \
               'display': {{'name': 'Agricultural Department', 'locale': 'en'}},\
               'credential_configurations_supported' : { \
-                 'FarmerProfileCredential' : {\
+                 'StudentCredential' : {\
                     'format': 'ldp_vc',\
-                    'scope' : 'mock_identity_vc_ldp',\
+                    'scope' : 'university_vc_ldp',\
                     'cryptographic_binding_methods_supported': {'did:jwk'},\
                     'credential_signing_alg_values_supported': {'Ed25519Signature2020'},\
                     'proof_types_supported': {'jwt': {'proof_signing_alg_values_supported': {'RS256', 'PS256'}}},\
                     'credential_definition': {\
-                    'type': {'VerifiableCredential','FarmerCredential'},\
+                    'type': {'VerifiableCredential','StudentCredential'},\
                     'context': {'https://www.w3.org/2018/credentials/v1'},\
                       'credentialSubject': {\
-                            'fullName': {'display': {{'name': 'Full Name','locale': 'en'}}}, \
-                            'mobileNumber': {'display': {{'name': 'Phone Number','locale': 'en'}}},\
-                            'dateOfBirth': {'display': {{'name': 'Date of Birth','locale': 'en'}}},\
-                            'gender': {'display': {{'name': 'Gender','locale': 'en'}}},\
-                            'state': {'display': {{'name': 'State','locale': 'en'}}},\
-                            'district': {'display': {{'name': 'District','locale': 'en'}}},\
-                            'villageOrTown': {'display': {{'name': 'Village or Town','locale': 'en'}}},\
-                            'postalCode': {'display': {{'name': 'Postal Code','locale': 'en'}}},\
-                            'landArea': {'display': {{'name': 'Land Area','locale': 'en'}}},\
-                            'landOwnershipType': {'display': {{'name': 'Land Ownership Type','locale': 'en'}}},\
-                            'primaryCropType': {'display': {{'name': 'Primary Crop Name','locale': 'en'}}},\
-                            'secondaryCropType': {'display': {{'name': 'Secondary Crop type','locale': 'en'}}},\
-                            'farmerID': {'display': {{'name': 'Farmer ID','locale': 'en'}}}\
-                     }},\
-                    'display': {{'name': 'Farmer Profile Verifiable Credential', \
+                          'uuid': {'display': {{'name': 'Uuid :','locale': 'en'}}}, \
+                          'email': {'display': {{'name': 'Email :','locale': 'en'}}},\
+                          'cFullname': {'display': {{'name': 'Full Name :','locale': 'en'}}},\
+                          'courses': {'display': {{'name': 'Courses :','locale': 'en'}}},\
+                          'courses': { \
+                            'display': {{'name': 'Courses', 'locale': 'en'}}, \
+                            'fields': { \
+                                'courseName': {'display': {{'name': 'Course Name', 'locale': 'en'}}}, \
+                                'courseProgress': {'display': {{'name': 'Progress (%)', 'locale': 'en'}}}, \
+                                'courseGrade': {'display': {{'name': 'Grade (%)', 'locale': 'en'}}}, \
+                                'learningPartner': {'display': {{'name': 'Learning Partner', 'locale': 'en'}}}, \
+                                'completionDate': {'display': {{'name': 'Completion Date', 'locale': 'en'}}}, \
+                                'certificateExpirationDate': {'display': {{'name': 'Certificate Expiration', 'locale': 'en'}}}, \
+                                'skillLevel': {'display': {{'name': 'Skill Level', 'locale': 'en'}}}, \
+                                'courseHours': {'display': {{'name': 'Course Hours', 'locale': 'en'}}}, \
+                                'status': {'display': {{'name': 'Status', 'locale': 'en'}}} \
+                            } \
+                          }, \
+                          'dateRegistered': {'display': {{'name': 'Registered Date :','locale': 'en'}}}\
+                      }},\
+                    'display': {{'name': 'WelearnTT Credential', \
                                   'locale': 'en', \
-                                  'logo': {'url': 'https://mosip.github.io/inji-config/logos/agro-vertias-logo.png','alt_text': 'a square logo of a Sunbird'},\
+                                  'logo': {'url': 'https://credissuer-public-assets.s3.ap-south-1.amazonaws.com/WeLearnTT-Logo.png','alt_text': 'a square logo of a Sunbird'},\
                                   'background_color': '#FDFAF9',\
-                                  'background_image': { 'uri': 'https://mosip.github.io/inji-config/logos/agro-vertias-logo.png' }, \
+                                  'background_image': { 'uri': 'https://credissuer-public-assets.s3.ap-south-1.amazonaws.com/WeLearnTT-Logo.png' }, \
                                   'text_color': '#7C4616'}},\
-                    'order' : {'farmerID','fullName','mobileNumber','dateOfBirth','gender','state','district','villageOrTown','postalCode','landArea','landOwnershipType','primaryCropType','secondaryCropType'}\
+                    'order' : {'uuid','email','cFullname','dateRegistered','courses'}\
   }}}}
diff --git a/docker-compose/docker-compose-injistack/config/certify-default.properties b/docker-compose/docker-compose-injistack/config/certify-default.properties
index f025832..e6b3ee7 100644
--- a/docker-compose/docker-compose-injistack/config/certify-default.properties
+++ b/docker-compose/docker-compose-injistack/config/certify-default.properties
@@ -44,7 +44,8 @@ mosip.certify.security.ignore-auth-urls=**/actuator/**,**/error,**/swagger-ui/**
 
 ## ------------------------------------------ Discovery openid-configuration -------------------------------------------
 mosip.certify.discovery.issuer-id=${mosipbox.public.url}${server.servlet.path}
-mosip.certify.authorization.url=https://esignet-mock.collab.mosip.net
+mosip.certify.authorization.url=https://dev-itr.credissuer.com
+# mosip.certify.authorization.url=https://e616-106-51-16-63.ngrok-free.app
 
 ##--------------change this later---------------------------------
 mosip.certify.supported.jwt-proof-alg={'RS256','PS256', 'ES256'}
@@ -56,9 +57,13 @@ mosip.certify.cnonce-expire-seconds=40
 
 mosip.certify.identifier=${mosipbox.public.url}
 mosip.certify.authn.filter-urls={ '${server.servlet.path}/issuance/credential', '${server.servlet.path}/issuance/vd11/credential', '${server.servlet.path}/issuance/vd12/credential' }
-mosip.certify.authn.issuer-uri=${mosip.certify.authorization.url}/v1/esignet
-mosip.certify.authn.jwk-set-uri=https://esignet-mock.collab.mosip.net/v1/esignet/oauth/.well-known/jwks.json
-mosip.certify.authn.allowed-audiences={ '${mosipbox.public.url}${server.servlet.path}/issuance/credential', '${mosip.certify.authorization.url}/v1/esignet/vci/credential' }
+mosip.certify.authn.issuer-uri=https://dev-itr.credissuer.com/esignet/v1/esignet
+mosip.certify.authn.jwk-set-uri=https://dev-itr.credissuer.com/esignet/v1/esignet/oauth/.well-known/jwks.json
+mosip.certify.authn.allowed-audiences={ '${mosipbox.public.url}${server.servlet.path}/issuance/credential', '${mosip.certify.authorization.url}/v1/esignet/vci/credential', 'https://dev-itr.credissuer.com/esignet/v1/esignet/vci/credential' }
+
+# mosip.certify.authn.issuer-uri=https://e616-106-51-16-63.ngrok-free.app/v1/esignet
+# mosip.certify.authn.jwk-set-uri=https://e616-106-51-16-63.ngrok-free.app/v1/esignet/oauth/.well-known/jwks.json
+# mosip.certify.authn.allowed-audiences={ '${mosipbox.public.url}${server.servlet.path}/issuance/credential', '${mosip.certify.authorization.url}/v1/esignet/vci/credential', 'https://e616-106-51-16-63.ngrok-free.app/v1/esignet/vci/credential' }
 
 #------------------------------------ Key-manager specific properties --------------------------------------------------
 #Crypto asymmetric algorithm name
diff --git a/docker-compose/docker-compose-injistack/config/credential-template.html b/docker-compose/docker-compose-injistack/config/credential-template.html
index 4607e5b..b9404a7 100644
--- a/docker-compose/docker-compose-injistack/config/credential-template.html
+++ b/docker-compose/docker-compose-injistack/config/credential-template.html
@@ -13,7 +13,7 @@
         <div style="margin: 30px; justify-content: center; align-items: center;">
             #if (!$face)
             <div style="float: left; height:100px;width:100px;background-color:white;border-radius:10px;border:1px solid grey">
-                <img style="margin: 25px;width: 50px; height:50px;" src="https://raw.githubusercontent.com/challabeehyv/mimoto-config/main/user-icon.png" alt="Logo" />
+                <img style="margin: 25px;width: 50px; height:50px;" src="https://mosip.github.io/inji-config/logos/user-icon.png" alt="Logo" />
             </div>
             #else
             <img style="height:100px;width:100px; border-radius:10px;" src="$face" alt="Logo" />
@@ -23,17 +23,61 @@
             </div>
         </div>
         <div style="margin-left: 30px; padding-top: 30px">
+
+            ## First show simple fields like UUID, Email, Name, etc.
             #foreach($entry in $rowProperties.entrySet())
-            #if($entry.value)
-            <div style="margin-bottom: 10px; float: left; width: 450px;">
-                <div style="font-weight: bold; font-size: 16px; margin-bottom: 5px; word-wrap: break-word;">$entry.key</div>
-                <div style="font-size: 16px; word-wrap: break-word;">$entry.value</div>
-            </div>
+              #if($entry.value)
+                #set($nestedMap = $entry.value)
+                #if($nestedMap && $nestedMap.size() > 0)
+                  #foreach($nestedEntry in $nestedMap.entrySet())
+                    #if($nestedEntry.value && $nestedEntry.key != "Courses")
+                      <div style="margin-bottom: 10px; float: left; width: 450px;">
+                        <div style="font-weight: bold; font-size: 16px; margin-bottom: 5px;">$nestedEntry.key</div>
+                        <div style="font-size: 16px;">$nestedEntry.value</div>
+                      </div>
+                    #end
+                  #end
+                #end
+              #end
             #end
+          
+            ## Now display the Courses section separately
+            #foreach($entry in $rowProperties.entrySet())
+              #if($entry.value)
+                #set($nestedMap = $entry.value)
+                #if($nestedMap && $nestedMap.size() > 0)
+                  #foreach($nestedEntry in $nestedMap.entrySet())
+                  #if($nestedEntry.key == "Courses" && $nestedEntry.value)
+                  <div style="clear: both; margin-top: 30px;">
+                    <h2 style="font-size: 18px; font-weight: bold; margin-bottom: 10px;">Courses</h2>
+                    #set($courses = $nestedEntry.value)
+                    #foreach($course in $courses)
+                      <div style="border: 1px solid #ccc; padding: 10px; margin-bottom: 10px; border-radius: 5px;">
+                        #foreach($field in $course.entrySet())
+                          #if($field.value)
+                            <div><strong>$field.key:</strong> $field.value</div>
+                          #end
+                        #end
+                      </div>
+                    #end
+                  </div>
+                    #end
+                  #end
+                #end
+              #end
             #end
-        </div>
+          </div>                 
     </div>
-    <img src="data:image/png;base64,$qrCodeImage" alt="QR Code"/>
+    <div style="text-align: center; margin-top: 20px;">
+        <img src="data:image/png;base64,$qrCodeImage" alt="QR Code" style="width: 150px; height: 150px; display: inline-block;"/>
+    </div>
+</div>
+<div style="display: flex; width: 100%; padding: 8px; border-radius: 8px; border: 2px solid #f6dfbe; background-color: #FFF7E5; margin: 32px 0;">
+    #if ($credentialValidity != -1)
+    <div style="padding: 0 16px; text-align: center; color: #8B6105; font-size: 14px;">Please note: This credential is limited to a maximum of $credentialValidity verifications by authorized verifiers. Once the specified number of verifications has been reached, this credential will no longer be valid for further verification attempts.</div>
+    #else
+    <div style="padding: 0 16px; text-align: center; color: #8B6105; font-size: 14px;">Please note: This credential can be used for verification by authorized verifiers without any limit on the number of verifications. It provides continuous, secure access for credential validation.</div>
+    #end
 </div>
 </body>
 </html>
diff --git a/docker-compose/docker-compose-injistack/config/mimoto-default.properties b/docker-compose/docker-compose-injistack/config/mimoto-default.properties
index 2df5e87..cadcf72 100644
--- a/docker-compose/docker-compose-injistack/config/mimoto-default.properties
+++ b/docker-compose/docker-compose-injistack/config/mimoto-default.properties
@@ -258,7 +258,7 @@ mosip.openid.issuers=mimoto-issuers-config.json
 mosip.openid.htmlTemplate=credential-template.html
 mosip.oidc.client.assertion.type=urn:ietf:params:oauth:client-assertion-type:jwt-bearer
 mosip.oidc.p12.filename=oidckeystore.p12
-mosip.oidc.p12.password=xy4gh6swa2i
+mosip.oidc.p12.password=5YBx6QT2wbY8Ls6w
 mosip.oidc.p12.path=certs/
 
 
diff --git a/docker-compose/docker-compose-injistack/config/mimoto-issuers-config.json b/docker-compose/docker-compose-injistack/config/mimoto-issuers-config.json
index 9a0ebd9..1eaba50 100644
--- a/docker-compose/docker-compose-injistack/config/mimoto-issuers-config.json
+++ b/docker-compose/docker-compose-injistack/config/mimoto-issuers-config.json
@@ -4,6 +4,7 @@
       "credential_issuer": "Farmer",
       "issuer_id": "Farmer",
       "protocol": "OpenId4VCI",
+      "credential_issuer_host": "http://certify:8090/v1/certify/issuance",
       "display": [
         {
           "name": "Agriculture Department",
@@ -19,9 +20,9 @@
       "client_id": "wallet-demo",
       "redirect_uri": "io.mosip.residentapp.inji://oauthredirect",
       "token_endpoint": "http://localhost:8099/v1/mimoto/get-token/Farmer",
-      "authorization_audience": "https://esignet-mock.collab.mosip.net/v1/esignet/oauth/v2/token",
-      "proxy_token_endpoint": "https://esignet-mock.collab.mosip.net/v1/esignet/oauth/v2/token",
-      "client_alias": "wallet-demo-client",
+      "authorization_audience": "https://dev-itr.credissuer.com/esignet/v1/esignet/oauth/v2/token",
+      "proxy_token_endpoint": "https://dev-itr.credissuer.com/v1/esignet/oauth/v2/token",
+      "client_alias": "mpartner-default-mimotooidc",
       "qr_code_type": "EmbeddedVC",
       "enabled": "true",
       "wellknown_endpoint": "http://certify:8090/v1/certify/issuance/.well-known/openid-credential-issuer"
@@ -30,6 +31,7 @@
       "issuer_id": "MockMdl",
       "credential_issuer": "MockMdl",
       "protocol": "OpenId4VCI",
+      "credential_issuer_host": "http://certify:8090/v1/certify/issuance",
       "display": [
         {
           "name": "Transport Department",
@@ -45,9 +47,9 @@
       "client_id": "wallet-demo",
       "redirect_uri": "io.mosip.residentapp.inji://oauthredirect",
       "token_endpoint": "http://localhost:8099/v1/mimoto/get-token/MockMdl",
-      "authorization_audience": "https://esignet-mock.collab.mosip.net/v1/esignet/oauth/v2/token",
-      "proxy_token_endpoint": "https://esignet-mock.collab.mosip.net/v1/esignet/oauth/v2/token",
-      "client_alias": "wallet-demo-client",
+      "authorization_audience": "https://dev-itr.credissuer.com/esignet/v1/esignet/oauth/v2/token",
+      "proxy_token_endpoint": "https://dev-itr.credissuer.com/v1/esignet/oauth/v2/token",
+      "client_alias": "mpartner-default-mimotooidc",
       "qr_code_type": "EmbeddedVC",
       "enabled": "true",
       "wellknown_endpoint": "http://certify:8090/v1/certify/issuance/.well-known/openid-credential-issuer"
diff --git a/docker-compose/docker-compose-injistack/docker-compose.yaml b/docker-compose/docker-compose-injistack/docker-compose.yaml
index f1f9ef2..e2eef2f 100644
--- a/docker-compose/docker-compose-injistack/docker-compose.yaml
+++ b/docker-compose/docker-compose-injistack/docker-compose.yaml
@@ -14,7 +14,7 @@ services:
       - "5433:5432"
 
   certify:
-    image: mosipdev/inji-certify-with-plugins:develop
+    image: certify_latest:2
     user: root
     ports:
       - 8090:8090
@@ -42,7 +42,7 @@ services:
 
   mimoto-service:
     container_name: 'Mimoto-Service'
-    image: mosipid/mimoto:0.15.0
+    image: mimoto-revoke:v1
     user: root
     ports:
       - '8099:8099'
@@ -73,6 +73,7 @@ services:
       - ./config/mimoto-trusted-verifiers.json:/home/mosip/mimoto-trusted-verifiers.json
       - ./config/credential-template.html:/home/mosip/credential-template.html
       - ./nginx.conf:/etc/nginx/conf.d/default.conf
+      - ./config/Farmer-StudentCredential-template.html:/home/mosip/Farmer-StudentCredential-template.html
     depends_on:
       - mimoto-service
     networks:
diff --git a/docker-compose/docker-compose-injistack/nginx.conf b/docker-compose/docker-compose-injistack/nginx.conf
index fd5d0e0..5b40703 100644
--- a/docker-compose/docker-compose-injistack/nginx.conf
+++ b/docker-compose/docker-compose-injistack/nginx.conf
@@ -14,9 +14,13 @@ server {
     }
 
     # Serve files from /home/mosip with autoindex enabled
-    location /credential-template.html {
-        root /home/mosip;
-        autoindex on;
+    # location /credential-template.html {
+    #     root /home/mosip;
+    #     autoindex on;
+    # }
+    location ~* /.*-template.html$ {
+        root /home/mosip; 
+        try_files $uri =404;
     }
 
     # Proxy API requests to mimoto-service
